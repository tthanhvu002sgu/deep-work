{"ast":null,"code":"// src/services/googleSheetsService.js\nimport googleAuthService from './googleAuthService';\nclass GoogleSheetsService {\n  constructor() {\n    this.SHEET_ID = process.env.REACT_APP_GOOGLE_SHEET_ID;\n    this.BASE_URL = 'https://sheets.googleapis.com/v4/spreadsheets';\n  }\n\n  // Helper method to make authenticated API requests\n  async makeAuthenticatedRequest(url, options = {}) {\n    try {\n      console.log('Making authenticated request to:', url);\n      if (!googleAuthService.isAuthenticated()) {\n        throw new Error('User not authenticated');\n      }\n      const response = await googleAuthService.makeAuthenticatedRequest(url, options);\n      console.log('Response status:', response.status);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error:', errorText);\n        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Google Sheets API Error:', error);\n      throw error;\n    }\n  }\n\n  // Get all tasks from Google Sheets\n  async getTasks() {\n    const range = 'Tasks!A:C';\n    const url = `${this.BASE_URL}/${this.SHEET_ID}/values/${range}`;\n    try {\n      const response = await this.makeAuthenticatedRequest(url);\n      const rows = response.values || [];\n      return rows.slice(1).map(row => ({\n        id: parseInt(row[0]) || Date.now(),\n        name: row[1] || '',\n        createdAt: row[2] || new Date().toISOString()\n      })).filter(task => task.name);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n      return [];\n    }\n  }\n\n  // Add new task to Google Sheets\n  async addTask(taskName) {\n    const newTask = {\n      id: Date.now(),\n      name: taskName,\n      createdAt: new Date().toISOString()\n    };\n    const range = 'Tasks!A:C';\n    const values = [[newTask.id, newTask.name, newTask.createdAt]];\n    const url = `${this.BASE_URL}/${this.SHEET_ID}/values/${range}:append?valueInputOption=RAW`;\n    try {\n      await this.makeAuthenticatedRequest(url, {\n        method: 'POST',\n        body: JSON.stringify({\n          values: values\n        })\n      });\n      return newTask;\n    } catch (error) {\n      console.error('Error adding task:', error);\n      throw error;\n    }\n  }\n\n  // Get all sessions from Google Sheets\n  async getSessions() {\n    const range = 'Sessions!A:D';\n    const url = `${this.BASE_URL}/${this.SHEET_ID}/values/${range}`;\n    try {\n      const response = await this.makeAuthenticatedRequest(url);\n      const rows = response.values || [];\n      return rows.slice(1).map(row => ({\n        id: parseInt(row[0]) || Date.now(),\n        taskId: parseInt(row[1]) || 0,\n        duration: parseInt(row[2]) || 0,\n        completedAt: row[3] || new Date().toISOString()\n      })).filter(session => session.taskId);\n    } catch (error) {\n      console.error('Error fetching sessions:', error);\n      return [];\n    }\n  }\n\n  // Add new session to Google Sheets\n  async addSession(taskId, duration) {\n    const newSession = {\n      id: Date.now(),\n      taskId: taskId,\n      duration: duration,\n      completedAt: new Date().toISOString()\n    };\n    const range = 'Sessions!A:D';\n    const values = [[newSession.id, newSession.taskId, newSession.duration, newSession.completedAt]];\n    const url = `${this.BASE_URL}/${this.SHEET_ID}/values/${range}:append?valueInputOption=RAW`;\n    try {\n      await this.makeAuthenticatedRequest(url, {\n        method: 'POST',\n        body: JSON.stringify({\n          values: values\n        })\n      });\n      return newSession;\n    } catch (error) {\n      console.error('Error adding session:', error);\n      throw error;\n    }\n  }\n\n  // Delete task (clear row)\n  async deleteTask(taskId) {\n    try {\n      const tasks = await this.getTasks();\n      const taskIndex = tasks.findIndex(task => task.id === taskId);\n      if (taskIndex === -1) {\n        throw new Error('Task not found');\n      }\n      const rowNumber = taskIndex + 2;\n      const range = `Tasks!A${rowNumber}:C${rowNumber}`;\n      const url = `${this.BASE_URL}/${this.SHEET_ID}/values/${range}?valueInputOption=RAW`;\n      await this.makeAuthenticatedRequest(url, {\n        method: 'PUT',\n        body: JSON.stringify({\n          values: [['', '', '']]\n        })\n      });\n      return true;\n    } catch (error) {\n      console.error('Error deleting task:', error);\n      throw error;\n    }\n  }\n\n  // Delete sessions by task ID\n  async deleteSessionsByTaskId(taskId) {\n    try {\n      const sessions = await this.getSessions();\n      const sessionsToDelete = sessions.filter(session => session.taskId === taskId);\n      for (const session of sessionsToDelete) {\n        const sessionIndex = sessions.findIndex(s => s.id === session.id);\n        if (sessionIndex !== -1) {\n          const rowNumber = sessionIndex + 2;\n          const range = `Sessions!A${rowNumber}:D${rowNumber}`;\n          const url = `${this.BASE_URL}/${this.SHEET_ID}/values/${range}?valueInputOption=RAW`;\n          await this.makeAuthenticatedRequest(url, {\n            method: 'PUT',\n            body: JSON.stringify({\n              values: [['', '', '', '']]\n            })\n          });\n        }\n      }\n      return true;\n    } catch (error) {\n      console.error('Error deleting sessions by task ID:', error);\n      throw error;\n    }\n  }\n}\nexport default new GoogleSheetsService();","map":{"version":3,"names":["googleAuthService","GoogleSheetsService","constructor","SHEET_ID","process","env","REACT_APP_GOOGLE_SHEET_ID","BASE_URL","makeAuthenticatedRequest","url","options","console","log","isAuthenticated","Error","response","status","ok","errorText","text","error","json","getTasks","range","rows","values","slice","map","row","id","parseInt","Date","now","name","createdAt","toISOString","filter","task","addTask","taskName","newTask","method","body","JSON","stringify","getSessions","taskId","duration","completedAt","session","addSession","newSession","deleteTask","tasks","taskIndex","findIndex","rowNumber","deleteSessionsByTaskId","sessions","sessionsToDelete","sessionIndex","s"],"sources":["C:/Users/Vu/Documents/vscode/deepwork/deepwork/src/services/googleSheetsService.js"],"sourcesContent":["// src/services/googleSheetsService.js\r\nimport googleAuthService from './googleAuthService';\r\n\r\nclass GoogleSheetsService {\r\n  constructor() {\r\n    this.SHEET_ID = process.env.REACT_APP_GOOGLE_SHEET_ID;\r\n    this.BASE_URL = 'https://sheets.googleapis.com/v4/spreadsheets';\r\n  }\r\n\r\n  // Helper method to make authenticated API requests\r\n  async makeAuthenticatedRequest(url, options = {}) {\r\n    try {\r\n      console.log('Making authenticated request to:', url);\r\n      \r\n      if (!googleAuthService.isAuthenticated()) {\r\n        throw new Error('User not authenticated');\r\n      }\r\n\r\n      const response = await googleAuthService.makeAuthenticatedRequest(url, options);\r\n\r\n      console.log('Response status:', response.status);\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error('API Error:', errorText);\r\n        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Google Sheets API Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get all tasks from Google Sheets\r\n  async getTasks() {\r\n    const range = 'Tasks!A:C';\r\n    const url = `${this.BASE_URL}/${this.SHEET_ID}/values/${range}`;\r\n    \r\n    try {\r\n      const response = await this.makeAuthenticatedRequest(url);\r\n      const rows = response.values || [];\r\n      \r\n      return rows.slice(1).map(row => ({\r\n        id: parseInt(row[0]) || Date.now(),\r\n        name: row[1] || '',\r\n        createdAt: row[2] || new Date().toISOString(),\r\n      })).filter(task => task.name);\r\n    } catch (error) {\r\n      console.error('Error fetching tasks:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Add new task to Google Sheets\r\n  async addTask(taskName) {\r\n    const newTask = {\r\n      id: Date.now(),\r\n      name: taskName,\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n\r\n    const range = 'Tasks!A:C';\r\n    const values = [[newTask.id, newTask.name, newTask.createdAt]];\r\n    \r\n    const url = `${this.BASE_URL}/${this.SHEET_ID}/values/${range}:append?valueInputOption=RAW`;\r\n    \r\n    try {\r\n      await this.makeAuthenticatedRequest(url, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          values: values,\r\n        }),\r\n      });\r\n      \r\n      return newTask;\r\n    } catch (error) {\r\n      console.error('Error adding task:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get all sessions from Google Sheets\r\n  async getSessions() {\r\n    const range = 'Sessions!A:D';\r\n    const url = `${this.BASE_URL}/${this.SHEET_ID}/values/${range}`;\r\n    \r\n    try {\r\n      const response = await this.makeAuthenticatedRequest(url);\r\n      const rows = response.values || [];\r\n      \r\n      return rows.slice(1).map(row => ({\r\n        id: parseInt(row[0]) || Date.now(),\r\n        taskId: parseInt(row[1]) || 0,\r\n        duration: parseInt(row[2]) || 0,\r\n        completedAt: row[3] || new Date().toISOString(),\r\n      })).filter(session => session.taskId);\r\n    } catch (error) {\r\n      console.error('Error fetching sessions:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Add new session to Google Sheets\r\n  async addSession(taskId, duration) {\r\n    const newSession = {\r\n      id: Date.now(),\r\n      taskId: taskId,\r\n      duration: duration,\r\n      completedAt: new Date().toISOString(),\r\n    };\r\n\r\n    const range = 'Sessions!A:D';\r\n    const values = [[newSession.id, newSession.taskId, newSession.duration, newSession.completedAt]];\r\n    \r\n    const url = `${this.BASE_URL}/${this.SHEET_ID}/values/${range}:append?valueInputOption=RAW`;\r\n    \r\n    try {\r\n      await this.makeAuthenticatedRequest(url, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          values: values,\r\n        }),\r\n      });\r\n      \r\n      return newSession;\r\n    } catch (error) {\r\n      console.error('Error adding session:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Delete task (clear row)\r\n  async deleteTask(taskId) {\r\n    try {\r\n      const tasks = await this.getTasks();\r\n      const taskIndex = tasks.findIndex(task => task.id === taskId);\r\n      \r\n      if (taskIndex === -1) {\r\n        throw new Error('Task not found');\r\n      }\r\n\r\n      const rowNumber = taskIndex + 2;\r\n      const range = `Tasks!A${rowNumber}:C${rowNumber}`;\r\n      const url = `${this.BASE_URL}/${this.SHEET_ID}/values/${range}?valueInputOption=RAW`;\r\n      \r\n      await this.makeAuthenticatedRequest(url, {\r\n        method: 'PUT',\r\n        body: JSON.stringify({\r\n          values: [['', '', '']],\r\n        }),\r\n      });\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting task:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Delete sessions by task ID\r\n  async deleteSessionsByTaskId(taskId) {\r\n    try {\r\n      const sessions = await this.getSessions();\r\n      const sessionsToDelete = sessions.filter(session => session.taskId === taskId);\r\n\r\n      for (const session of sessionsToDelete) {\r\n        const sessionIndex = sessions.findIndex(s => s.id === session.id);\r\n        if (sessionIndex !== -1) {\r\n          const rowNumber = sessionIndex + 2;\r\n          const range = `Sessions!A${rowNumber}:D${rowNumber}`;\r\n          const url = `${this.BASE_URL}/${this.SHEET_ID}/values/${range}?valueInputOption=RAW`;\r\n          \r\n          await this.makeAuthenticatedRequest(url, {\r\n            method: 'PUT',\r\n            body: JSON.stringify({\r\n              values: [['', '', '', '']],\r\n            }),\r\n          });\r\n        }\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting sessions by task ID:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new GoogleSheetsService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}