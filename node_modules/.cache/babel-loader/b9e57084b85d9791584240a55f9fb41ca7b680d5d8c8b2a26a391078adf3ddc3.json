{"ast":null,"code":"// src/services/googleSheetsService.js\nclass GoogleSheetsService {\n  constructor() {\n    this.API_KEY = process.env.REACT_APP_GOOGLE_SHEETS_API_KEY;\n    this.SHEET_ID = process.env.REACT_APP_GOOGLE_SHEET_ID;\n    this.BASE_URL = 'https://sheets.googleapis.com/v4/spreadsheets';\n  }\n\n  // Helper method to make API requests\n  async makeRequest(url, options = {}) {\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Google Sheets API Error:', error);\n      throw error;\n    }\n  }\n\n  // Get all tasks from Google Sheets\n  async getTasks() {\n    const range = 'Tasks!A:C'; // A=ID, B=Name, C=CreatedAt\n    const url = `${this.BASE_URL}/${this.SHEET_ID}/values/${range}?key=${this.API_KEY}`;\n    try {\n      const response = await this.makeRequest(url);\n      const rows = response.values || [];\n\n      // Skip header row and convert to objects\n      return rows.slice(1).map(row => ({\n        id: parseInt(row[0]) || Date.now(),\n        name: row[1] || '',\n        createdAt: row[2] || new Date().toISOString()\n      })).filter(task => task.name); // Filter out empty tasks\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n      return [];\n    }\n  }\n\n  // Add new task to Google Sheets\n  async addTask(taskName) {\n    const newTask = {\n      id: Date.now(),\n      name: taskName,\n      createdAt: new Date().toISOString()\n    };\n    const range = 'Tasks!A:C';\n    const values = [[newTask.id, newTask.name, newTask.createdAt]];\n    const url = `${this.BASE_URL}/${this.SHEET_ID}/values/${range}:append?valueInputOption=RAW&key=${this.API_KEY}`;\n    try {\n      await this.makeRequest(url, {\n        method: 'POST',\n        body: JSON.stringify({\n          values: values\n        })\n      });\n      return newTask;\n    } catch (error) {\n      console.error('Error adding task:', error);\n      throw error;\n    }\n  }\n\n  // Delete task from Google Sheets\n  async deleteTask(taskId) {\n    try {\n      // First, get all tasks to find the row index\n      const tasks = await this.getTasks();\n      const taskIndex = tasks.findIndex(task => task.id === taskId);\n      if (taskIndex === -1) {\n        throw new Error('Task not found');\n      }\n\n      // Delete the row (add 2 because: 1 for header + 1 for 0-based index)\n      const rowIndex = taskIndex + 2;\n      const url = `${this.BASE_URL}/${this.SHEET_ID}:batchUpdate?key=${this.API_KEY}`;\n      await this.makeRequest(url, {\n        method: 'POST',\n        body: JSON.stringify({\n          requests: [{\n            deleteDimension: {\n              range: {\n                sheetId: 0,\n                // Tasks sheet ID (usually 0 for first sheet)\n                dimension: 'ROWS',\n                startIndex: rowIndex - 1,\n                endIndex: rowIndex\n              }\n            }\n          }]\n        })\n      });\n      return true;\n    } catch (error) {\n      console.error('Error deleting task:', error);\n      throw error;\n    }\n  }\n\n  // Get all sessions from Google Sheets\n  async getSessions() {\n    const range = 'Sessions!A:D'; // A=ID, B=TaskId, C=Duration, D=CompletedAt\n    const url = `${this.BASE_URL}/${this.SHEET_ID}/values/${range}?key=${this.API_KEY}`;\n    try {\n      const response = await this.makeRequest(url);\n      const rows = response.values || [];\n\n      // Skip header row and convert to objects\n      return rows.slice(1).map(row => ({\n        id: parseInt(row[0]) || Date.now(),\n        taskId: parseInt(row[1]) || 0,\n        duration: parseInt(row[2]) || 0,\n        completedAt: row[3] || new Date().toISOString()\n      })).filter(session => session.taskId); // Filter out invalid sessions\n    } catch (error) {\n      console.error('Error fetching sessions:', error);\n      return [];\n    }\n  }\n\n  // Add new session to Google Sheets\n  async addSession(taskId, duration) {\n    const newSession = {\n      id: Date.now(),\n      taskId: taskId,\n      duration: duration,\n      completedAt: new Date().toISOString()\n    };\n    const range = 'Sessions!A:D';\n    const values = [[newSession.id, newSession.taskId, newSession.duration, newSession.completedAt]];\n    const url = `${this.BASE_URL}/${this.SHEET_ID}/values/${range}:append?valueInputOption=RAW&key=${this.API_KEY}`;\n    try {\n      await this.makeRequest(url, {\n        method: 'POST',\n        body: JSON.stringify({\n          values: values\n        })\n      });\n      return newSession;\n    } catch (error) {\n      console.error('Error adding session:', error);\n      throw error;\n    }\n  }\n\n  // Delete sessions by task ID (when task is deleted)\n  async deleteSessionsByTaskId(taskId) {\n    try {\n      const sessions = await this.getSessions();\n      const sessionIds = sessions.filter(session => session.taskId === taskId).map(session => session.id);\n\n      // Delete sessions one by one (Google Sheets API limitation)\n      for (const sessionId of sessionIds) {\n        await this.deleteSession(sessionId);\n      }\n      return true;\n    } catch (error) {\n      console.error('Error deleting sessions by task ID:', error);\n      throw error;\n    }\n  }\n\n  // Delete single session\n  async deleteSession(sessionId) {\n    try {\n      const sessions = await this.getSessions();\n      const sessionIndex = sessions.findIndex(session => session.id === sessionId);\n      if (sessionIndex === -1) {\n        throw new Error('Session not found');\n      }\n      const rowIndex = sessionIndex + 2; // Header + 0-based index\n      const url = `${this.BASE_URL}/${this.SHEET_ID}:batchUpdate?key=${this.API_KEY}`;\n      await this.makeRequest(url, {\n        method: 'POST',\n        body: JSON.stringify({\n          requests: [{\n            deleteDimension: {\n              range: {\n                sheetId: 1,\n                // Sessions sheet ID (1 for second sheet)\n                dimension: 'ROWS',\n                startIndex: rowIndex - 1,\n                endIndex: rowIndex\n              }\n            }\n          }]\n        })\n      });\n      return true;\n    } catch (error) {\n      console.error('Error deleting session:', error);\n      throw error;\n    }\n  }\n}\nexport default new GoogleSheetsService();","map":{"version":3,"names":["GoogleSheetsService","constructor","API_KEY","process","env","REACT_APP_GOOGLE_SHEETS_API_KEY","SHEET_ID","REACT_APP_GOOGLE_SHEET_ID","BASE_URL","makeRequest","url","options","response","fetch","headers","ok","Error","status","json","error","console","getTasks","range","rows","values","slice","map","row","id","parseInt","Date","now","name","createdAt","toISOString","filter","task","addTask","taskName","newTask","method","body","JSON","stringify","deleteTask","taskId","tasks","taskIndex","findIndex","rowIndex","requests","deleteDimension","sheetId","dimension","startIndex","endIndex","getSessions","duration","completedAt","session","addSession","newSession","deleteSessionsByTaskId","sessions","sessionIds","sessionId","deleteSession","sessionIndex"],"sources":["C:/Users/Vu/Documents/vscode/deepwork/deepwork/src/services/googleSheetsService.js"],"sourcesContent":["// src/services/googleSheetsService.js\r\nclass GoogleSheetsService {\r\n  constructor() {\r\n    this.API_KEY = process.env.REACT_APP_GOOGLE_SHEETS_API_KEY;\r\n    this.SHEET_ID = process.env.REACT_APP_GOOGLE_SHEET_ID;\r\n    this.BASE_URL = 'https://sheets.googleapis.com/v4/spreadsheets';\r\n  }\r\n\r\n  // Helper method to make API requests\r\n  async makeRequest(url, options = {}) {\r\n    try {\r\n      const response = await fetch(url, {\r\n        ...options,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...options.headers,\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Google Sheets API Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get all tasks from Google Sheets\r\n  async getTasks() {\r\n    const range = 'Tasks!A:C'; // A=ID, B=Name, C=CreatedAt\r\n    const url = `${this.BASE_URL}/${this.SHEET_ID}/values/${range}?key=${this.API_KEY}`;\r\n    \r\n    try {\r\n      const response = await this.makeRequest(url);\r\n      const rows = response.values || [];\r\n      \r\n      // Skip header row and convert to objects\r\n      return rows.slice(1).map(row => ({\r\n        id: parseInt(row[0]) || Date.now(),\r\n        name: row[1] || '',\r\n        createdAt: row[2] || new Date().toISOString(),\r\n      })).filter(task => task.name); // Filter out empty tasks\r\n    } catch (error) {\r\n      console.error('Error fetching tasks:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Add new task to Google Sheets\r\n  async addTask(taskName) {\r\n    const newTask = {\r\n      id: Date.now(),\r\n      name: taskName,\r\n      createdAt: new Date().toISOString(),\r\n    };\r\n\r\n    const range = 'Tasks!A:C';\r\n    const values = [[newTask.id, newTask.name, newTask.createdAt]];\r\n    \r\n    const url = `${this.BASE_URL}/${this.SHEET_ID}/values/${range}:append?valueInputOption=RAW&key=${this.API_KEY}`;\r\n    \r\n    try {\r\n      await this.makeRequest(url, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          values: values,\r\n        }),\r\n      });\r\n      \r\n      return newTask;\r\n    } catch (error) {\r\n      console.error('Error adding task:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Delete task from Google Sheets\r\n  async deleteTask(taskId) {\r\n    try {\r\n      // First, get all tasks to find the row index\r\n      const tasks = await this.getTasks();\r\n      const taskIndex = tasks.findIndex(task => task.id === taskId);\r\n      \r\n      if (taskIndex === -1) {\r\n        throw new Error('Task not found');\r\n      }\r\n\r\n      // Delete the row (add 2 because: 1 for header + 1 for 0-based index)\r\n      const rowIndex = taskIndex + 2;\r\n      const url = `${this.BASE_URL}/${this.SHEET_ID}:batchUpdate?key=${this.API_KEY}`;\r\n      \r\n      await this.makeRequest(url, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          requests: [{\r\n            deleteDimension: {\r\n              range: {\r\n                sheetId: 0, // Tasks sheet ID (usually 0 for first sheet)\r\n                dimension: 'ROWS',\r\n                startIndex: rowIndex - 1,\r\n                endIndex: rowIndex,\r\n              },\r\n            },\r\n          }],\r\n        }),\r\n      });\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting task:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get all sessions from Google Sheets\r\n  async getSessions() {\r\n    const range = 'Sessions!A:D'; // A=ID, B=TaskId, C=Duration, D=CompletedAt\r\n    const url = `${this.BASE_URL}/${this.SHEET_ID}/values/${range}?key=${this.API_KEY}`;\r\n    \r\n    try {\r\n      const response = await this.makeRequest(url);\r\n      const rows = response.values || [];\r\n      \r\n      // Skip header row and convert to objects\r\n      return rows.slice(1).map(row => ({\r\n        id: parseInt(row[0]) || Date.now(),\r\n        taskId: parseInt(row[1]) || 0,\r\n        duration: parseInt(row[2]) || 0,\r\n        completedAt: row[3] || new Date().toISOString(),\r\n      })).filter(session => session.taskId); // Filter out invalid sessions\r\n    } catch (error) {\r\n      console.error('Error fetching sessions:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Add new session to Google Sheets\r\n  async addSession(taskId, duration) {\r\n    const newSession = {\r\n      id: Date.now(),\r\n      taskId: taskId,\r\n      duration: duration,\r\n      completedAt: new Date().toISOString(),\r\n    };\r\n\r\n    const range = 'Sessions!A:D';\r\n    const values = [[newSession.id, newSession.taskId, newSession.duration, newSession.completedAt]];\r\n    \r\n    const url = `${this.BASE_URL}/${this.SHEET_ID}/values/${range}:append?valueInputOption=RAW&key=${this.API_KEY}`;\r\n    \r\n    try {\r\n      await this.makeRequest(url, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          values: values,\r\n        }),\r\n      });\r\n      \r\n      return newSession;\r\n    } catch (error) {\r\n      console.error('Error adding session:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Delete sessions by task ID (when task is deleted)\r\n  async deleteSessionsByTaskId(taskId) {\r\n    try {\r\n      const sessions = await this.getSessions();\r\n      const sessionIds = sessions\r\n        .filter(session => session.taskId === taskId)\r\n        .map(session => session.id);\r\n\r\n      // Delete sessions one by one (Google Sheets API limitation)\r\n      for (const sessionId of sessionIds) {\r\n        await this.deleteSession(sessionId);\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting sessions by task ID:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Delete single session\r\n  async deleteSession(sessionId) {\r\n    try {\r\n      const sessions = await this.getSessions();\r\n      const sessionIndex = sessions.findIndex(session => session.id === sessionId);\r\n      \r\n      if (sessionIndex === -1) {\r\n        throw new Error('Session not found');\r\n      }\r\n\r\n      const rowIndex = sessionIndex + 2; // Header + 0-based index\r\n      const url = `${this.BASE_URL}/${this.SHEET_ID}:batchUpdate?key=${this.API_KEY}`;\r\n      \r\n      await this.makeRequest(url, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          requests: [{\r\n            deleteDimension: {\r\n              range: {\r\n                sheetId: 1, // Sessions sheet ID (1 for second sheet)\r\n                dimension: 'ROWS',\r\n                startIndex: rowIndex - 1,\r\n                endIndex: rowIndex,\r\n              },\r\n            },\r\n          }],\r\n        }),\r\n      });\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting session:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default new GoogleSheetsService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}