{"ast":null,"code":"// src/services/googleAuthService.js\nclass GoogleAuthService {\n  constructor() {\n    this.clientId = process.env.REACT_APP_GOOGLE_CLIENT_ID;\n    this.clientSecret = process.env.REACT_APP_GOOGLE_CLIENT_SECRET;\n    this.redirectUri = process.env.REACT_APP_REDIRECT_URI;\n    this.scope = 'https://www.googleapis.com/auth/spreadsheets';\n    this.accessToken = localStorage.getItem('google_access_token');\n    this.refreshToken = localStorage.getItem('google_refresh_token');\n    this.tokenExpiry = localStorage.getItem('google_token_expiry');\n  }\n\n  // Check if user is authenticated\n  isAuthenticated() {\n    return !!this.accessToken && !this.isTokenExpired();\n  }\n\n  // Check if token is expired\n  isTokenExpired() {\n    if (!this.tokenExpiry) return true;\n    return Date.now() > parseInt(this.tokenExpiry);\n  }\n\n  // Get authorization URL\n  getAuthUrl() {\n    const params = new URLSearchParams({\n      client_id: this.clientId,\n      redirect_uri: this.redirectUri,\n      scope: this.scope,\n      response_type: 'code',\n      access_type: 'offline',\n      prompt: 'consent'\n    });\n    return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;\n  }\n\n  // Exchange authorization code for tokens\n  async exchangeCodeForTokens(code) {\n    try {\n      const response = await fetch('https://oauth2.googleapis.com/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: new URLSearchParams({\n          client_id: this.clientId,\n          client_secret: this.clientSecret,\n          code: code,\n          grant_type: 'authorization_code',\n          redirect_uri: this.redirectUri\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n\n      // Store tokens\n      this.accessToken = data.access_token;\n      this.refreshToken = data.refresh_token;\n      this.tokenExpiry = Date.now() + data.expires_in * 1000;\n      localStorage.setItem('google_access_token', this.accessToken);\n      localStorage.setItem('google_refresh_token', this.refreshToken);\n      localStorage.setItem('google_token_expiry', this.tokenExpiry.toString());\n      return data;\n    } catch (error) {\n      console.error('Error exchanging code for tokens:', error);\n      throw error;\n    }\n  }\n\n  // Refresh access token\n  async refreshAccessToken() {\n    if (!this.refreshToken) {\n      throw new Error('No refresh token available');\n    }\n    try {\n      const response = await fetch('https://oauth2.googleapis.com/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: new URLSearchParams({\n          client_id: this.clientId,\n          client_secret: this.clientSecret,\n          refresh_token: this.refreshToken,\n          grant_type: 'refresh_token'\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n\n      // Update tokens\n      this.accessToken = data.access_token;\n      this.tokenExpiry = Date.now() + data.expires_in * 1000;\n      localStorage.setItem('google_access_token', this.accessToken);\n      localStorage.setItem('google_token_expiry', this.tokenExpiry.toString());\n      return data;\n    } catch (error) {\n      console.error('Error refreshing access token:', error);\n      throw error;\n    }\n  }\n\n  // Get valid access token (refresh if needed)\n  async getValidAccessToken() {\n    if (!this.accessToken) {\n      throw new Error('No access token available');\n    }\n    if (this.isTokenExpired()) {\n      await this.refreshAccessToken();\n    }\n    return this.accessToken;\n  }\n\n  // Sign out\n  signOut() {\n    this.accessToken = null;\n    this.refreshToken = null;\n    this.tokenExpiry = null;\n    localStorage.removeItem('google_access_token');\n    localStorage.removeItem('google_refresh_token');\n    localStorage.removeItem('google_token_expiry');\n  }\n\n  // Make authenticated request\n  async makeAuthenticatedRequest(url, options = {}) {\n    const token = await this.getValidAccessToken();\n    return fetch(url, {\n      ...options,\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json',\n        ...options.headers\n      }\n    });\n  }\n}\nexport default new GoogleAuthService();","map":{"version":3,"names":["GoogleAuthService","constructor","clientId","process","env","REACT_APP_GOOGLE_CLIENT_ID","clientSecret","REACT_APP_GOOGLE_CLIENT_SECRET","redirectUri","REACT_APP_REDIRECT_URI","scope","accessToken","localStorage","getItem","refreshToken","tokenExpiry","isAuthenticated","isTokenExpired","Date","now","parseInt","getAuthUrl","params","URLSearchParams","client_id","redirect_uri","response_type","access_type","prompt","toString","exchangeCodeForTokens","code","response","fetch","method","headers","body","client_secret","grant_type","ok","Error","status","data","json","access_token","refresh_token","expires_in","setItem","error","console","refreshAccessToken","getValidAccessToken","signOut","removeItem","makeAuthenticatedRequest","url","options","token"],"sources":["C:/Users/Vu/Documents/vscode/deepwork/deepwork/src/services/googleAuthService.js"],"sourcesContent":["// src/services/googleAuthService.js\r\nclass GoogleAuthService {\r\n  constructor() {\r\n    this.clientId = process.env.REACT_APP_GOOGLE_CLIENT_ID;\r\n    this.clientSecret = process.env.REACT_APP_GOOGLE_CLIENT_SECRET;\r\n    this.redirectUri = process.env.REACT_APP_REDIRECT_URI;\r\n    this.scope = 'https://www.googleapis.com/auth/spreadsheets';\r\n    this.accessToken = localStorage.getItem('google_access_token');\r\n    this.refreshToken = localStorage.getItem('google_refresh_token');\r\n    this.tokenExpiry = localStorage.getItem('google_token_expiry');\r\n  }\r\n\r\n  // Check if user is authenticated\r\n  isAuthenticated() {\r\n    return !!this.accessToken && !this.isTokenExpired();\r\n  }\r\n\r\n  // Check if token is expired\r\n  isTokenExpired() {\r\n    if (!this.tokenExpiry) return true;\r\n    return Date.now() > parseInt(this.tokenExpiry);\r\n  }\r\n\r\n  // Get authorization URL\r\n  getAuthUrl() {\r\n    const params = new URLSearchParams({\r\n      client_id: this.clientId,\r\n      redirect_uri: this.redirectUri,\r\n      scope: this.scope,\r\n      response_type: 'code',\r\n      access_type: 'offline',\r\n      prompt: 'consent'\r\n    });\r\n\r\n    return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;\r\n  }\r\n\r\n  // Exchange authorization code for tokens\r\n  async exchangeCodeForTokens(code) {\r\n    try {\r\n      const response = await fetch('https://oauth2.googleapis.com/token', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        body: new URLSearchParams({\r\n          client_id: this.clientId,\r\n          client_secret: this.clientSecret,\r\n          code: code,\r\n          grant_type: 'authorization_code',\r\n          redirect_uri: this.redirectUri,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      // Store tokens\r\n      this.accessToken = data.access_token;\r\n      this.refreshToken = data.refresh_token;\r\n      this.tokenExpiry = Date.now() + (data.expires_in * 1000);\r\n\r\n      localStorage.setItem('google_access_token', this.accessToken);\r\n      localStorage.setItem('google_refresh_token', this.refreshToken);\r\n      localStorage.setItem('google_token_expiry', this.tokenExpiry.toString());\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error exchanging code for tokens:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Refresh access token\r\n  async refreshAccessToken() {\r\n    if (!this.refreshToken) {\r\n      throw new Error('No refresh token available');\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('https://oauth2.googleapis.com/token', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        body: new URLSearchParams({\r\n          client_id: this.clientId,\r\n          client_secret: this.clientSecret,\r\n          refresh_token: this.refreshToken,\r\n          grant_type: 'refresh_token',\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      // Update tokens\r\n      this.accessToken = data.access_token;\r\n      this.tokenExpiry = Date.now() + (data.expires_in * 1000);\r\n\r\n      localStorage.setItem('google_access_token', this.accessToken);\r\n      localStorage.setItem('google_token_expiry', this.tokenExpiry.toString());\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error refreshing access token:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get valid access token (refresh if needed)\r\n  async getValidAccessToken() {\r\n    if (!this.accessToken) {\r\n      throw new Error('No access token available');\r\n    }\r\n\r\n    if (this.isTokenExpired()) {\r\n      await this.refreshAccessToken();\r\n    }\r\n\r\n    return this.accessToken;\r\n  }\r\n\r\n  // Sign out\r\n  signOut() {\r\n    this.accessToken = null;\r\n    this.refreshToken = null;\r\n    this.tokenExpiry = null;\r\n    \r\n    localStorage.removeItem('google_access_token');\r\n    localStorage.removeItem('google_refresh_token');\r\n    localStorage.removeItem('google_token_expiry');\r\n  }\r\n\r\n  // Make authenticated request\r\n  async makeAuthenticatedRequest(url, options = {}) {\r\n    const token = await this.getValidAccessToken();\r\n    \r\n    return fetch(url, {\r\n      ...options,\r\n      headers: {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default new GoogleAuthService();"],"mappings":"AAAA;AACA,MAAMA,iBAAiB,CAAC;EACtBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,0BAA0B;IACtD,IAAI,CAACC,YAAY,GAAGH,OAAO,CAACC,GAAG,CAACG,8BAA8B;IAC9D,IAAI,CAACC,WAAW,GAAGL,OAAO,CAACC,GAAG,CAACK,sBAAsB;IACrD,IAAI,CAACC,KAAK,GAAG,8CAA8C;IAC3D,IAAI,CAACC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,qBAAqB,CAAC;IAC9D,IAAI,CAACC,YAAY,GAAGF,YAAY,CAACC,OAAO,CAAC,sBAAsB,CAAC;IAChE,IAAI,CAACE,WAAW,GAAGH,YAAY,CAACC,OAAO,CAAC,qBAAqB,CAAC;EAChE;;EAEA;EACAG,eAAeA,CAAA,EAAG;IAChB,OAAO,CAAC,CAAC,IAAI,CAACL,WAAW,IAAI,CAAC,IAAI,CAACM,cAAc,CAAC,CAAC;EACrD;;EAEA;EACAA,cAAcA,CAAA,EAAG;IACf,IAAI,CAAC,IAAI,CAACF,WAAW,EAAE,OAAO,IAAI;IAClC,OAAOG,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAACL,WAAW,CAAC;EAChD;;EAEA;EACAM,UAAUA,CAAA,EAAG;IACX,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC;MACjCC,SAAS,EAAE,IAAI,CAACtB,QAAQ;MACxBuB,YAAY,EAAE,IAAI,CAACjB,WAAW;MAC9BE,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBgB,aAAa,EAAE,MAAM;MACrBC,WAAW,EAAE,SAAS;MACtBC,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,OAAO,gDAAgDN,MAAM,CAACO,QAAQ,CAAC,CAAC,EAAE;EAC5E;;EAEA;EACA,MAAMC,qBAAqBA,CAACC,IAAI,EAAE;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;QAClEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAE,IAAIb,eAAe,CAAC;UACxBC,SAAS,EAAE,IAAI,CAACtB,QAAQ;UACxBmC,aAAa,EAAE,IAAI,CAAC/B,YAAY;UAChCyB,IAAI,EAAEA,IAAI;UACVO,UAAU,EAAE,oBAAoB;UAChCb,YAAY,EAAE,IAAI,CAACjB;QACrB,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACwB,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;;MAElC;MACA,IAAI,CAAChC,WAAW,GAAG+B,IAAI,CAACE,YAAY;MACpC,IAAI,CAAC9B,YAAY,GAAG4B,IAAI,CAACG,aAAa;MACtC,IAAI,CAAC9B,WAAW,GAAGG,IAAI,CAACC,GAAG,CAAC,CAAC,GAAIuB,IAAI,CAACI,UAAU,GAAG,IAAK;MAExDlC,YAAY,CAACmC,OAAO,CAAC,qBAAqB,EAAE,IAAI,CAACpC,WAAW,CAAC;MAC7DC,YAAY,CAACmC,OAAO,CAAC,sBAAsB,EAAE,IAAI,CAACjC,YAAY,CAAC;MAC/DF,YAAY,CAACmC,OAAO,CAAC,qBAAqB,EAAE,IAAI,CAAChC,WAAW,CAACc,QAAQ,CAAC,CAAC,CAAC;MAExE,OAAOa,IAAI;IACb,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAME,kBAAkBA,CAAA,EAAG;IACzB,IAAI,CAAC,IAAI,CAACpC,YAAY,EAAE;MACtB,MAAM,IAAI0B,KAAK,CAAC,4BAA4B,CAAC;IAC/C;IAEA,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;QAClEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAE,IAAIb,eAAe,CAAC;UACxBC,SAAS,EAAE,IAAI,CAACtB,QAAQ;UACxBmC,aAAa,EAAE,IAAI,CAAC/B,YAAY;UAChCuC,aAAa,EAAE,IAAI,CAAC/B,YAAY;UAChCwB,UAAU,EAAE;QACd,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACN,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;MAC3D;MAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;;MAElC;MACA,IAAI,CAAChC,WAAW,GAAG+B,IAAI,CAACE,YAAY;MACpC,IAAI,CAAC7B,WAAW,GAAGG,IAAI,CAACC,GAAG,CAAC,CAAC,GAAIuB,IAAI,CAACI,UAAU,GAAG,IAAK;MAExDlC,YAAY,CAACmC,OAAO,CAAC,qBAAqB,EAAE,IAAI,CAACpC,WAAW,CAAC;MAC7DC,YAAY,CAACmC,OAAO,CAAC,qBAAqB,EAAE,IAAI,CAAChC,WAAW,CAACc,QAAQ,CAAC,CAAC,CAAC;MAExE,OAAOa,IAAI;IACb,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMG,mBAAmBA,CAAA,EAAG;IAC1B,IAAI,CAAC,IAAI,CAACxC,WAAW,EAAE;MACrB,MAAM,IAAI6B,KAAK,CAAC,2BAA2B,CAAC;IAC9C;IAEA,IAAI,IAAI,CAACvB,cAAc,CAAC,CAAC,EAAE;MACzB,MAAM,IAAI,CAACiC,kBAAkB,CAAC,CAAC;IACjC;IAEA,OAAO,IAAI,CAACvC,WAAW;EACzB;;EAEA;EACAyC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACzC,WAAW,GAAG,IAAI;IACvB,IAAI,CAACG,YAAY,GAAG,IAAI;IACxB,IAAI,CAACC,WAAW,GAAG,IAAI;IAEvBH,YAAY,CAACyC,UAAU,CAAC,qBAAqB,CAAC;IAC9CzC,YAAY,CAACyC,UAAU,CAAC,sBAAsB,CAAC;IAC/CzC,YAAY,CAACyC,UAAU,CAAC,qBAAqB,CAAC;EAChD;;EAEA;EACA,MAAMC,wBAAwBA,CAACC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAChD,MAAMC,KAAK,GAAG,MAAM,IAAI,CAACN,mBAAmB,CAAC,CAAC;IAE9C,OAAOlB,KAAK,CAACsB,GAAG,EAAE;MAChB,GAAGC,OAAO;MACVrB,OAAO,EAAE;QACP,eAAe,EAAE,UAAUsB,KAAK,EAAE;QAClC,cAAc,EAAE,kBAAkB;QAClC,GAAGD,OAAO,CAACrB;MACb;IACF,CAAC,CAAC;EACJ;AACF;AAEA,eAAe,IAAInC,iBAAiB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}