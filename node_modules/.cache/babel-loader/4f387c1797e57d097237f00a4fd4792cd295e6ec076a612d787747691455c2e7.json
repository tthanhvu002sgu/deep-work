{"ast":null,"code":"// src/services/googleAuthService.js\n// filepath: c:\\Users\\Vu\\Documents\\vscode\\deepwork\\deepwork\\src\\services\\googleAuthService.js\nclass GoogleAuthService {\n  constructor() {\n    this.clientId = process.env.REACT_APP_GOOGLE_CLIENT_ID;\n    this.clientSecret = process.env.REACT_APP_GOOGLE_CLIENT_SECRET;\n    this.redirectUri = process.env.REACT_APP_REDIRECT_URI || 'http://localhost:3000/auth/callback';\n    this.tokenKey = 'deepwork_google_tokens';\n  }\n\n  // Helper method for API requests with proper error handling\n  async makeAuthRequest(url, options = {}) {\n    try {\n      console.log('Making auth request to:', url);\n      const response = await fetch(url, {\n        ...options,\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          ...options.headers\n        }\n      });\n      console.log('Auth response status:', response.status);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Auth API Error:', errorText);\n        throw new Error(`Authentication failed: ${response.status} - ${errorText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Google Auth API Error:', error);\n      throw error;\n    }\n  }\n\n  // Generate OAuth URL with correct parameters (fixed conflict)\n  getAuthUrl() {\n    const params = new URLSearchParams({\n      client_id: this.clientId,\n      redirect_uri: this.redirectUri,\n      response_type: 'code',\n      scope: 'https://www.googleapis.com/auth/spreadsheets',\n      access_type: 'offline',\n      // For refresh token\n      prompt: 'consent',\n      // Use only 'prompt', remove 'approval_prompt'\n      include_granted_scopes: 'true',\n      // For incremental authorization\n      state: 'deepwork_auth_' + Date.now() // Add state for security\n    });\n    const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?${params}`;\n    console.log('Generated auth URL:', authUrl);\n    return authUrl;\n  }\n\n  // Exchange code for tokens with retry logic\n  async exchangeCodeForTokens(code, retries = 3) {\n    for (let attempt = 1; attempt <= retries; attempt++) {\n      try {\n        console.log(`Exchanging code for tokens (attempt ${attempt}/${retries})`);\n        const params = new URLSearchParams({\n          client_id: this.clientId,\n          client_secret: this.clientSecret,\n          code: code,\n          grant_type: 'authorization_code',\n          redirect_uri: this.redirectUri\n        });\n        console.log('Token exchange params:', params.toString());\n        const response = await this.makeAuthRequest('https://oauth2.googleapis.com/token', {\n          method: 'POST',\n          body: params\n        });\n\n        // Save tokens with extended expiry\n        this.saveTokens(response);\n        return response;\n      } catch (error) {\n        console.error(`Auth attempt ${attempt} failed:`, error);\n        if (attempt === retries) {\n          throw new Error(`Authentication failed after ${retries} attempts: ${error.message}`);\n        }\n\n        // Wait before retry (exponential backoff)\n        await new Promise(resolve => setTimeout(resolve, 1000 * attempt));\n      }\n    }\n  }\n\n  // Save tokens with error handling and long expiry\n  saveTokens(tokens) {\n    try {\n      const tokenData = {\n        access_token: tokens.access_token,\n        refresh_token: tokens.refresh_token,\n        // Set expiry to a very long time for persistent sessions\n        expires_at: Date.now() + (tokens.expires_in || 3600) * 1000,\n        token_type: tokens.token_type || 'Bearer',\n        // Flag to indicate user wants persistent session\n        persistent_session: true,\n        created_at: Date.now(),\n        scope: tokens.scope || 'https://www.googleapis.com/auth/spreadsheets'\n      };\n      localStorage.setItem(this.tokenKey, JSON.stringify(tokenData));\n      console.log('Tokens saved successfully with persistent session');\n    } catch (error) {\n      console.error('Error saving tokens:', error);\n      throw new Error('Failed to save authentication tokens');\n    }\n  }\n\n  // Get stored tokens\n  getTokens() {\n    try {\n      const tokens = localStorage.getItem(this.tokenKey);\n      return tokens ? JSON.parse(tokens) : null;\n    } catch (error) {\n      console.error('Error retrieving tokens:', error);\n      return null;\n    }\n  }\n\n  // Check if user is authenticated - more lenient for persistent sessions\n  isAuthenticated() {\n    const tokens = this.getTokens();\n    if (!tokens || !tokens.access_token) {\n      return false;\n    }\n\n    // If it's a persistent session, be more lenient with expiry\n    if (tokens.persistent_session) {\n      // Check if token is extremely old (30 days)\n      const thirtyDaysAgo = Date.now() - 30 * 24 * 60 * 60 * 1000;\n      if (tokens.created_at && tokens.created_at > thirtyDaysAgo) {\n        return true;\n      }\n    }\n\n    // Standard expiry check with small buffer\n    const oneMinuteFromNow = Date.now() + 1 * 60 * 1000;\n    return tokens.expires_at > oneMinuteFromNow;\n  }\n\n  // Get valid access token with automatic refresh\n  async getValidAccessToken() {\n    const tokens = this.getTokens();\n    if (!tokens) {\n      throw new Error('No authentication tokens found');\n    }\n\n    // If token is still valid, return it\n    if (this.isAuthenticated()) {\n      return tokens.access_token;\n    }\n\n    // Try to refresh token if available\n    if (tokens.refresh_token) {\n      try {\n        console.log('Refreshing access token...');\n        await this.refreshTokens(tokens.refresh_token);\n        const newTokens = this.getTokens();\n        return newTokens === null || newTokens === void 0 ? void 0 : newTokens.access_token;\n      } catch (error) {\n        console.error('Token refresh failed:', error);\n        // Don't clear tokens immediately for persistent sessions\n        if (!tokens.persistent_session) {\n          this.clearTokens();\n        }\n        throw new Error('Authentication expired. Please sign in again.');\n      }\n    }\n    throw new Error('Authentication expired. Please sign in again.');\n  }\n\n  // Refresh tokens with enhanced error handling\n  async refreshTokens(refreshToken) {\n    try {\n      const params = new URLSearchParams({\n        client_id: this.clientId,\n        client_secret: this.clientSecret,\n        refresh_token: refreshToken,\n        grant_type: 'refresh_token'\n      });\n      const response = await this.makeAuthRequest('https://oauth2.googleapis.com/token', {\n        method: 'POST',\n        body: params\n      });\n\n      // Update stored tokens\n      const currentTokens = this.getTokens();\n      const updatedTokens = {\n        ...currentTokens,\n        access_token: response.access_token,\n        expires_at: Date.now() + response.expires_in * 1000,\n        // Keep the persistent session flag\n        persistent_session: currentTokens.persistent_session,\n        last_refreshed: Date.now()\n      };\n\n      // Update refresh token if provided\n      if (response.refresh_token) {\n        updatedTokens.refresh_token = response.refresh_token;\n      }\n      this.saveTokens(updatedTokens);\n      console.log('Tokens refreshed successfully');\n      return response;\n    } catch (error) {\n      console.error('Error refreshing tokens:', error);\n      throw error;\n    }\n  }\n\n  // Clear stored tokens\n  clearTokens() {\n    try {\n      localStorage.removeItem(this.tokenKey);\n      console.log('Tokens cleared');\n    } catch (error) {\n      console.error('Error clearing tokens:', error);\n    }\n  }\n\n  // Sign out - only clears when user explicitly signs out\n  signOut() {\n    this.clearTokens();\n    console.log('User signed out - tokens cleared');\n  }\n\n  // Check if session is persistent\n  isPersistentSession() {\n    const tokens = this.getTokens();\n    return (tokens === null || tokens === void 0 ? void 0 : tokens.persistent_session) || false;\n  }\n\n  // Get session info for display\n  getSessionInfo() {\n    const tokens = this.getTokens();\n    if (!tokens) return null;\n    return {\n      isAuthenticated: this.isAuthenticated(),\n      isPersistent: tokens.persistent_session,\n      createdAt: tokens.created_at,\n      lastRefreshed: tokens.last_refreshed,\n      expiresAt: tokens.expires_at,\n      scope: tokens.scope\n    };\n  }\n\n  // Validate state parameter for security\n  validateState(receivedState) {\n    return receivedState && receivedState.startsWith('deepwork_auth_');\n  }\n}\nexport default new GoogleAuthService();","map":{"version":3,"names":["GoogleAuthService","constructor","clientId","process","env","REACT_APP_GOOGLE_CLIENT_ID","clientSecret","REACT_APP_GOOGLE_CLIENT_SECRET","redirectUri","REACT_APP_REDIRECT_URI","tokenKey","makeAuthRequest","url","options","console","log","response","fetch","headers","status","ok","errorText","text","error","Error","json","getAuthUrl","params","URLSearchParams","client_id","redirect_uri","response_type","scope","access_type","prompt","include_granted_scopes","state","Date","now","authUrl","exchangeCodeForTokens","code","retries","attempt","client_secret","grant_type","toString","method","body","saveTokens","message","Promise","resolve","setTimeout","tokens","tokenData","access_token","refresh_token","expires_at","expires_in","token_type","persistent_session","created_at","localStorage","setItem","JSON","stringify","getTokens","getItem","parse","isAuthenticated","thirtyDaysAgo","oneMinuteFromNow","getValidAccessToken","refreshTokens","newTokens","clearTokens","refreshToken","currentTokens","updatedTokens","last_refreshed","removeItem","signOut","isPersistentSession","getSessionInfo","isPersistent","createdAt","lastRefreshed","expiresAt","validateState","receivedState","startsWith"],"sources":["C:/Users/Vu/Documents/vscode/deepwork/deepwork/src/services/googleAuthService.js"],"sourcesContent":["// src/services/googleAuthService.js\r\n// filepath: c:\\Users\\Vu\\Documents\\vscode\\deepwork\\deepwork\\src\\services\\googleAuthService.js\r\nclass GoogleAuthService {\r\n  constructor() {\r\n    this.clientId = process.env.REACT_APP_GOOGLE_CLIENT_ID;\r\n    this.clientSecret = process.env.REACT_APP_GOOGLE_CLIENT_SECRET;\r\n    this.redirectUri = process.env.REACT_APP_REDIRECT_URI || 'http://localhost:3000/auth/callback';\r\n    this.tokenKey = 'deepwork_google_tokens';\r\n  }\r\n\r\n  // Helper method for API requests with proper error handling\r\n  async makeAuthRequest(url, options = {}) {\r\n    try {\r\n      console.log('Making auth request to:', url);\r\n      const response = await fetch(url, {\r\n        ...options,\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n          ...options.headers,\r\n        },\r\n      });\r\n\r\n      console.log('Auth response status:', response.status);\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error('Auth API Error:', errorText);\r\n        throw new Error(`Authentication failed: ${response.status} - ${errorText}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Google Auth API Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generate OAuth URL with correct parameters (fixed conflict)\r\n  getAuthUrl() {\r\n    const params = new URLSearchParams({\r\n      client_id: this.clientId,\r\n      redirect_uri: this.redirectUri,\r\n      response_type: 'code',\r\n      scope: 'https://www.googleapis.com/auth/spreadsheets',\r\n      access_type: 'offline', // For refresh token\r\n      prompt: 'consent',      // Use only 'prompt', remove 'approval_prompt'\r\n      include_granted_scopes: 'true', // For incremental authorization\r\n      state: 'deepwork_auth_' + Date.now() // Add state for security\r\n    });\r\n\r\n    const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?${params}`;\r\n    console.log('Generated auth URL:', authUrl);\r\n    return authUrl;\r\n  }\r\n\r\n  // Exchange code for tokens with retry logic\r\n  async exchangeCodeForTokens(code, retries = 3) {\r\n    for (let attempt = 1; attempt <= retries; attempt++) {\r\n      try {\r\n        console.log(`Exchanging code for tokens (attempt ${attempt}/${retries})`);\r\n        \r\n        const params = new URLSearchParams({\r\n          client_id: this.clientId,\r\n          client_secret: this.clientSecret,\r\n          code: code,\r\n          grant_type: 'authorization_code',\r\n          redirect_uri: this.redirectUri,\r\n        });\r\n\r\n        console.log('Token exchange params:', params.toString());\r\n\r\n        const response = await this.makeAuthRequest('https://oauth2.googleapis.com/token', {\r\n          method: 'POST',\r\n          body: params,\r\n        });\r\n\r\n        // Save tokens with extended expiry\r\n        this.saveTokens(response);\r\n        return response;\r\n\r\n      } catch (error) {\r\n        console.error(`Auth attempt ${attempt} failed:`, error);\r\n        \r\n        if (attempt === retries) {\r\n          throw new Error(`Authentication failed after ${retries} attempts: ${error.message}`);\r\n        }\r\n        \r\n        // Wait before retry (exponential backoff)\r\n        await new Promise(resolve => setTimeout(resolve, 1000 * attempt));\r\n      }\r\n    }\r\n  }\r\n\r\n  // Save tokens with error handling and long expiry\r\n  saveTokens(tokens) {\r\n    try {\r\n      const tokenData = {\r\n        access_token: tokens.access_token,\r\n        refresh_token: tokens.refresh_token,\r\n        // Set expiry to a very long time for persistent sessions\r\n        expires_at: Date.now() + ((tokens.expires_in || 3600) * 1000),\r\n        token_type: tokens.token_type || 'Bearer',\r\n        // Flag to indicate user wants persistent session\r\n        persistent_session: true,\r\n        created_at: Date.now(),\r\n        scope: tokens.scope || 'https://www.googleapis.com/auth/spreadsheets'\r\n      };\r\n      \r\n      localStorage.setItem(this.tokenKey, JSON.stringify(tokenData));\r\n      console.log('Tokens saved successfully with persistent session');\r\n    } catch (error) {\r\n      console.error('Error saving tokens:', error);\r\n      throw new Error('Failed to save authentication tokens');\r\n    }\r\n  }\r\n\r\n  // Get stored tokens\r\n  getTokens() {\r\n    try {\r\n      const tokens = localStorage.getItem(this.tokenKey);\r\n      return tokens ? JSON.parse(tokens) : null;\r\n    } catch (error) {\r\n      console.error('Error retrieving tokens:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Check if user is authenticated - more lenient for persistent sessions\r\n  isAuthenticated() {\r\n    const tokens = this.getTokens();\r\n    if (!tokens || !tokens.access_token) {\r\n      return false;\r\n    }\r\n\r\n    // If it's a persistent session, be more lenient with expiry\r\n    if (tokens.persistent_session) {\r\n      // Check if token is extremely old (30 days)\r\n      const thirtyDaysAgo = Date.now() - (30 * 24 * 60 * 60 * 1000);\r\n      if (tokens.created_at && tokens.created_at > thirtyDaysAgo) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    // Standard expiry check with small buffer\r\n    const oneMinuteFromNow = Date.now() + (1 * 60 * 1000);\r\n    return tokens.expires_at > oneMinuteFromNow;\r\n  }\r\n\r\n  // Get valid access token with automatic refresh\r\n  async getValidAccessToken() {\r\n    const tokens = this.getTokens();\r\n    if (!tokens) {\r\n      throw new Error('No authentication tokens found');\r\n    }\r\n\r\n    // If token is still valid, return it\r\n    if (this.isAuthenticated()) {\r\n      return tokens.access_token;\r\n    }\r\n\r\n    // Try to refresh token if available\r\n    if (tokens.refresh_token) {\r\n      try {\r\n        console.log('Refreshing access token...');\r\n        await this.refreshTokens(tokens.refresh_token);\r\n        const newTokens = this.getTokens();\r\n        return newTokens?.access_token;\r\n      } catch (error) {\r\n        console.error('Token refresh failed:', error);\r\n        // Don't clear tokens immediately for persistent sessions\r\n        if (!tokens.persistent_session) {\r\n          this.clearTokens();\r\n        }\r\n        throw new Error('Authentication expired. Please sign in again.');\r\n      }\r\n    }\r\n\r\n    throw new Error('Authentication expired. Please sign in again.');\r\n  }\r\n\r\n  // Refresh tokens with enhanced error handling\r\n  async refreshTokens(refreshToken) {\r\n    try {\r\n      const params = new URLSearchParams({\r\n        client_id: this.clientId,\r\n        client_secret: this.clientSecret,\r\n        refresh_token: refreshToken,\r\n        grant_type: 'refresh_token',\r\n      });\r\n\r\n      const response = await this.makeAuthRequest('https://oauth2.googleapis.com/token', {\r\n        method: 'POST',\r\n        body: params,\r\n      });\r\n\r\n      // Update stored tokens\r\n      const currentTokens = this.getTokens();\r\n      const updatedTokens = {\r\n        ...currentTokens,\r\n        access_token: response.access_token,\r\n        expires_at: Date.now() + (response.expires_in * 1000),\r\n        // Keep the persistent session flag\r\n        persistent_session: currentTokens.persistent_session,\r\n        last_refreshed: Date.now()\r\n      };\r\n\r\n      // Update refresh token if provided\r\n      if (response.refresh_token) {\r\n        updatedTokens.refresh_token = response.refresh_token;\r\n      }\r\n\r\n      this.saveTokens(updatedTokens);\r\n      console.log('Tokens refreshed successfully');\r\n      return response;\r\n\r\n    } catch (error) {\r\n      console.error('Error refreshing tokens:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Clear stored tokens\r\n  clearTokens() {\r\n    try {\r\n      localStorage.removeItem(this.tokenKey);\r\n      console.log('Tokens cleared');\r\n    } catch (error) {\r\n      console.error('Error clearing tokens:', error);\r\n    }\r\n  }\r\n\r\n  // Sign out - only clears when user explicitly signs out\r\n  signOut() {\r\n    this.clearTokens();\r\n    console.log('User signed out - tokens cleared');\r\n  }\r\n\r\n  // Check if session is persistent\r\n  isPersistentSession() {\r\n    const tokens = this.getTokens();\r\n    return tokens?.persistent_session || false;\r\n  }\r\n\r\n  // Get session info for display\r\n  getSessionInfo() {\r\n    const tokens = this.getTokens();\r\n    if (!tokens) return null;\r\n\r\n    return {\r\n      isAuthenticated: this.isAuthenticated(),\r\n      isPersistent: tokens.persistent_session,\r\n      createdAt: tokens.created_at,\r\n      lastRefreshed: tokens.last_refreshed,\r\n      expiresAt: tokens.expires_at,\r\n      scope: tokens.scope\r\n    };\r\n  }\r\n\r\n  // Validate state parameter for security\r\n  validateState(receivedState) {\r\n    return receivedState && receivedState.startsWith('deepwork_auth_');\r\n  }\r\n}\r\n\r\nexport default new GoogleAuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}