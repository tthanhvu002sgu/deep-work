{"ast":null,"code":"// import React, { useState, useMemo } from \"react\";\n// import { Bar } from \"react-chartjs-2\";\n// import {\n//   Chart as ChartJS,\n//   CategoryScale,\n//   LinearScale,\n//   BarElement,\n//   Title,\n//   Tooltip,\n//   Legend,\n// } from \"chart.js\";\n\n// ChartJS.register(\n//   CategoryScale,\n//   LinearScale,\n//   BarElement,\n//   Title,\n//   Tooltip,\n//   Legend\n// );\n\n// // Heatmap Component\n// const FocusHeatmap = ({ sessions, tasks, filter, dailyTargets = {} }) => {\n//   const [hoveredDate, setHoveredDate] = useState(null);\n//   const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\n\n//   // Calculate data for heatmap\n//   const heatmapData = useMemo(() => {\n//     const now = new Date();\n//     const dates = [];\n\n//     // Generate date range based on filter\n//     if (filter === \"week\") {\n//       // Get last 7 days\n//       for (let i = 6; i >= 0; i--) {\n//         const date = new Date(now);\n//         date.setDate(now.getDate() - i);\n//         dates.push(new Date(date));\n//       }\n//     } else if (filter === \"month\") {\n//       // Get all days in current month\n//       const year = now.getFullYear();\n//       const month = now.getMonth();\n//       const daysInMonth = new Date(year, month + 1, 0).getDate();\n\n//       for (let day = 1; day <= daysInMonth; day++) {\n//         dates.push(new Date(year, month, day));\n//       }\n//     }\n\n//     // Calculate focus time for each date\n//     return dates.map((date) => {\n//       const dateKey = date.toISOString().split(\"T\")[0];\n//       const dayStart = new Date(date);\n//       dayStart.setHours(0, 0, 0, 0);\n//       const dayEnd = new Date(date);\n//       dayEnd.setHours(23, 59, 59, 999);\n\n//       // Get sessions for this date\n//       const daySessions = sessions.filter((session) => {\n//         const sessionDate = new Date(session.completedAt);\n//         return sessionDate >= dayStart && sessionDate <= dayEnd;\n//       });\n\n//       const totalMinutes =\n//         daySessions.reduce((acc, session) => acc + session.duration, 0) / 60;\n//       const totalHours = totalMinutes / 60;\n//       const target = dailyTargets[dateKey];\n//       const targetMinutes = target?.targetMinutes || 0;\n//       const targetHours = targetMinutes / 60;\n\n//       // Determine color based on conditions\n//       let color = \"bg-gray-100\"; // Default: no activity\n//       let intensity = 0;\n\n//       if (target && targetMinutes > 0) {\n//         // Has target set\n//         if (totalMinutes >= targetMinutes) {\n//           // Target completed - green\n//           color = \"bg-green-500\";\n//           intensity = Math.min(totalHours / targetHours, 2); // Max intensity at 2x target\n//         } else {\n//           // Target not completed - red\n//           color = \"bg-red-500\";\n//           intensity = Math.max(0.3, totalMinutes / targetMinutes); // Min 30% intensity\n//         }\n//       } else {\n//         // No target set\n//         if (totalHours >= 1) {\n//           // >= 1h without target - blue\n//           color = \"bg-blue-500\";\n//           intensity = Math.min(totalHours / 3, 1); // Max intensity at 3h\n//         } else if (totalMinutes > 0) {\n//           // < 1h without target - orange-red\n//           color = \"bg-orange-600\";\n//           intensity = Math.max(0.2, totalMinutes / 60); // Min 20% intensity\n//         }\n//       }\n\n//       return {\n//         date,\n//         dateKey,\n//         totalMinutes: Math.round(totalMinutes),\n//         totalHours: Math.round(totalHours * 10) / 10,\n//         sessionCount: daySessions.length,\n//         target: targetMinutes,\n//         targetAchieved: targetMinutes > 0 && totalMinutes >= targetMinutes,\n//         color,\n//         intensity: Math.max(0.2, Math.min(intensity, 1)),\n//         tasks: [...new Set(daySessions.map((s) => s.taskId))].map(\n//           (taskId) => tasks.find((t) => t.id === taskId)?.name || \"Task đã xóa\"\n//         ),\n//       };\n//     });\n//   }, [sessions, tasks, filter, dailyTargets]);\n\n//   const handleMouseEnter = (dayData, event) => {\n//     setHoveredDate(dayData);\n//     setTooltipPosition({ x: event.clientX, y: event.clientY });\n//   };\n\n//   const handleMouseMove = (event) => {\n//     if (hoveredDate) {\n//       setTooltipPosition({ x: event.clientX, y: event.clientY });\n//     }\n//   };\n\n//   const handleMouseLeave = () => {\n//     setHoveredDate(null);\n//   };\n\n//   const formatDate = (date) => {\n//     return date.toLocaleDateString(\"vi-VN\", {\n//       day: \"2-digit\",\n//       month: \"2-digit\",\n//     });\n//   };\n\n//   const formatTime = (minutes) => {\n//     if (minutes >= 60) {\n//       const hours = Math.floor(minutes / 60);\n//       const mins = minutes % 60;\n//       return mins > 0 ? `${hours}h ${mins}p` : `${hours}h`;\n//     }\n//     return `${minutes}p`;\n//   };\n\n//   if (filter === \"day\") {\n//     return null; // Don't show heatmap for day filter\n//   }\n\n//   return (\n//     <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n//       <h3 className=\"text-md font-semibold text-gray-800 mb-3\">\n//         🔥 Heatmap tập trung {filter === \"week\" ? \"tuần này\" : \"tháng này\"}\n//       </h3>\n\n//       {/* Legend */}\n//       <div className=\"flex items-center space-x-4 mb-4 text-xs\">\n//         <span className=\"text-gray-600\">Ít</span>\n//         <div className=\"flex space-x-1\">\n//           <div className=\"w-3 h-3 bg-gray-100 rounded border\"></div>\n//           <div className=\"w-3 h-3 bg-orange-600 opacity-30 rounded\"></div>\n//           <div className=\"w-3 h-3 bg-blue-500 opacity-50 rounded\"></div>\n//           <div className=\"w-3 h-3 bg-green-500 opacity-70 rounded\"></div>\n//           <div className=\"w-3 h-3 bg-green-500 rounded\"></div>\n//           <div className=\"w-3 h-3 bg-red-500 rounded\"></div>\n//         </div>\n//         <span className=\"text-gray-600\">Nhiều</span>\n//         <div className=\"flex items-center space-x-2 ml-4 text-xs\">\n//           <div className=\"flex items-center space-x-1\">\n//             <div className=\"w-2 h-2 bg-green-500 rounded\"></div>\n//             <span>Đạt mục tiêu</span>\n//           </div>\n//           <div className=\"flex items-center space-x-1\">\n//             <div className=\"w-2 h-2 bg-red-500 rounded\"></div>\n//             <span>Chưa đạt mục tiêu</span>\n//           </div>\n//           <div className=\"flex items-center space-x-1\">\n//             <div className=\"w-2 h-2 bg-blue-500 rounded\"></div>\n//             <span>Không mục tiêu ≥1h</span>\n//           </div>\n//           <div className=\"flex items-center space-x-1\">\n//             <div className=\"w-2 h-2 bg-orange-600 rounded\"></div>\n//             <span>Không mục tiêu {\"<\"} 1h</span>\n//           </div>\n//         </div>\n//       </div>\n\n//       {/* Heatmap Grid */}\n//       <div\n//         className={`grid gap-1 ${\n//           filter === \"week\"\n//             ? \"grid-cols-7\"\n//             : \"grid-cols-7 lg:grid-cols-10 xl:grid-cols-15\"\n//         }`}\n//       >\n//         {filter === \"week\" &&\n//           // Week day headers\n//           [\"CN\", \"T2\", \"T3\", \"T4\", \"T5\", \"T6\", \"T7\"].map((day) => (\n//             <div\n//               key={day}\n//               className=\"text-xs font-medium text-gray-500 text-center py-1\"\n//             >\n//               {day}\n//             </div>\n//           ))}\n\n//         {heatmapData.map((dayData, index) => (\n//           <div\n//             key={dayData.dateKey}\n//             className={`\n//               w-6 h-6 rounded cursor-pointer border border-gray-200\n//               ${dayData.color} hover:ring-2 hover:ring-gray-400 transition-all\n//               flex items-center justify-center text-xs font-medium\n//             `}\n//             style={{\n//               opacity: dayData.totalMinutes > 0 ? dayData.intensity : 0.1,\n//               color: dayData.totalMinutes > 0 ? \"white\" : \"#6b7280\",\n//             }}\n//             onMouseEnter={(e) => handleMouseEnter(dayData, e)}\n//             onMouseMove={handleMouseMove}\n//             onMouseLeave={handleMouseLeave}\n//             title={`${formatDate(dayData.date)}: ${formatTime(\n//               dayData.totalMinutes\n//             )}`}\n//           >\n//             {dayData.date.getDate()}\n//           </div>\n//         ))}\n//       </div>\n\n//       {/* Tooltip */}\n//       {hoveredDate && (\n//         <div\n//           className=\"fixed z-50 bg-gray-900 text-white text-xs rounded-lg p-3 shadow-lg pointer-events-none max-w-xs\"\n//           style={{\n//             left: tooltipPosition.x + 10,\n//             top: tooltipPosition.y - 10,\n//             transform: \"translateY(-100%)\",\n//           }}\n//         >\n//           <div className=\"font-semibold mb-1\">\n//             {hoveredDate.date.toLocaleDateString(\"vi-VN\", {\n//               weekday: \"long\",\n//               day: \"numeric\",\n//               month: \"long\",\n//             })}\n//           </div>\n\n//           <div className=\"space-y-1\">\n//             <div>\n//               ⏱️ Thời gian tập trung:{\" \"}\n//               <span className=\"font-semibold text-blue-300\">\n//                 {formatTime(hoveredDate.totalMinutes)}\n//               </span>\n//             </div>\n\n//             <div>\n//               📊 Số phiên:{\" \"}\n//               <span className=\"font-semibold\">{hoveredDate.sessionCount}</span>\n//             </div>\n\n//             {hoveredDate.target > 0 ? (\n//               <div>\n//                 🎯 Mục tiêu:{\" \"}\n//                 <span className=\"font-semibold\">\n//                   {formatTime(hoveredDate.target)}\n//                 </span>\n//                 <span\n//                   className={`ml-1 ${\n//                     hoveredDate.targetAchieved\n//                       ? \"text-green-400\"\n//                       : \"text-red-400\"\n//                   }`}\n//                 >\n//                   {hoveredDate.targetAchieved ? \"✅ Đạt\" : \"❌ Chưa đạt\"}\n//                 </span>\n//               </div>\n//             ) : (\n//               <div className=\"text-gray-400\">🎯 Không đặt mục tiêu</div>\n//             )}\n\n//             {hoveredDate.tasks.length > 0 && (\n//               <div>\n//                 📝 Tasks:{\" \"}\n//                 <span className=\"text-green-300\">\n//                   {hoveredDate.tasks.slice(0, 2).join(\", \")}\n//                   {hoveredDate.tasks.length > 2 &&\n//                     ` +${hoveredDate.tasks.length - 2} khác`}\n//                 </span>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// const HistoryView = ({\n//   sessions,\n//   tasks,\n//   filter,\n//   setFilter,\n//   dailyTargets = {},\n// }) => {\n//   // Existing chart data logic\n//   const chartData = React.useMemo(() => {\n//     const dataByTask = sessions.reduce((acc, session) => {\n//       const taskId = session.taskId;\n//       acc[taskId] = (acc[taskId] || 0) + session.duration;\n//       return acc;\n//     }, {});\n\n//     const taskMap = tasks.reduce((map, task) => {\n//       map[task.id] = task.name;\n//       return map;\n//     }, {});\n\n//     const labels = Object.keys(dataByTask).map(\n//       (taskId) => taskMap[taskId] || \"Task đã xóa\"\n//     );\n//     const data = Object.values(dataByTask).map((totalSeconds) =>\n//       Math.round(totalSeconds / 60)\n//     );\n\n//     return {\n//       labels,\n//       datasets: [\n//         {\n//           label: \"Thời gian tập trung (phút)\",\n//           data,\n//           backgroundColor: \"rgba(59, 130, 246, 0.8)\",\n//           borderColor: \"rgba(59, 130, 246, 1)\",\n//           borderWidth: 1,\n//           borderRadius: 4,\n//           borderSkipped: false,\n//         },\n//       ],\n//     };\n//   }, [sessions, tasks]);\n\n//   const chartOptions = {\n//     responsive: true,\n//     maintainAspectRatio: false,\n//     indexAxis: \"y\",\n//     plugins: {\n//       legend: {\n//         display: false,\n//       },\n//       title: {\n//         display: false,\n//       },\n//       tooltip: {\n//         callbacks: {\n//           label: function (context) {\n//             return `${context.parsed.x} phút`;\n//           },\n//         },\n//       },\n//     },\n//     scales: {\n//       x: {\n//         beginAtZero: true,\n//         ticks: {\n//           callback: function (value) {\n//             return value + \"p\";\n//           },\n//         },\n//         grid: {\n//           color: \"rgba(0, 0, 0, 0.1)\",\n//         },\n//       },\n//       y: {\n//         ticks: {\n//           maxRotation: 0,\n//           minRotation: 0,\n//           font: {\n//             size: 12,\n//           },\n//         },\n//         grid: {\n//           display: false,\n//         },\n//       },\n//     },\n//     elements: {\n//       bar: {\n//         borderWidth: 1,\n//       },\n//     },\n//   };\n\n//   const getFilterText = (filter) => {\n//     if (filter === \"day\") return \"hôm nay\";\n//     if (filter === \"week\") return \"tuần này\";\n//     if (filter === \"month\") return \"tháng này\";\n//     return \"\";\n//   };\n\n//   // Calculate total focus time for current filter\n//   const totalMinutes =\n//     sessions.reduce((acc, session) => acc + session.duration, 0) / 60;\n//   const totalHours = Math.floor(totalMinutes / 60);\n//   const remainingMinutes = Math.round(totalMinutes % 60);\n\n//   const formatTotalTime = () => {\n//     if (totalHours > 0) {\n//       return `${totalHours} giờ ${remainingMinutes} phút`;\n//     }\n//     return `${Math.round(totalMinutes)} phút`;\n//   };\n\n//   return (\n//     <div className=\"bg-white rounded-lg p-4 mb-4 shadow-sm border border-gray-200\">\n//       {/* Header */}\n//       <div className=\"flex justify-between items-center mb-4\">\n//         <div>\n//           <h2 className=\"text-lg font-semibold text-gray-900\">\n//             📊 Thống kê {getFilterText(filter)}\n//           </h2>\n//           {sessions.length > 0 && (\n//             <p className=\"text-sm text-gray-600 mt-1\">\n//               Tổng cộng:{\" \"}\n//               <span className=\"font-semibold text-blue-600\">\n//                 {formatTotalTime()}\n//               </span>{\" \"}\n//               ({sessions.length} phiên)\n//             </p>\n//           )}\n//         </div>\n\n//         <div className=\"flex space-x-1 bg-gray-100 rounded-lg p-1\">\n//           {[\"day\", \"week\", \"month\"].map((f) => (\n//             <button\n//               key={f}\n//               onClick={() => setFilter(f)}\n//               className={`px-3 py-1 text-sm font-medium rounded-md transition-colors ${\n//                 filter === f\n//                   ? \"bg-white text-blue-600 shadow-sm\"\n//                   : \"text-gray-600 hover:text-gray-900\"\n//               }`}\n//             >\n//               {f === \"day\" ? \"Ngày\" : f === \"week\" ? \"Tuần\" : \"Tháng\"}\n//             </button>\n//           ))}\n//         </div>\n//       </div>\n\n//       {/* Chart */}\n//       {sessions.length > 0 ? (\n//         <div style={{ height: \"250px\" }}>\n//           <Bar data={chartData} options={chartOptions} />\n//         </div>\n//       ) : (\n//         <div className=\"text-center py-12 text-gray-500\">\n//           <div className=\"text-5xl mb-3\">📈</div>\n//           <h3 className=\"text-lg font-medium text-gray-700 mb-2\">\n//             Chưa có dữ liệu {getFilterText(filter)}\n//           </h3>\n//           <p className=\"text-sm\">\n//             Bắt đầu một phiên làm việc để xem thống kê tại đây\n//           </p>\n//         </div>\n//       )}\n\n//       {/* Quick Stats */}\n//       {sessions.length > 0 && (\n//         <div className=\"mt-4 grid grid-cols-3 gap-4 pt-4 border-t border-gray-100\">\n//           <div className=\"text-center\">\n//             <p className=\"text-xs text-gray-500 uppercase tracking-wide\">\n//               Phiên\n//             </p>\n//             <p className=\"text-lg font-bold text-gray-900\">{sessions.length}</p>\n//           </div>\n//           <div className=\"text-center\">\n//             <p className=\"text-xs text-gray-500 uppercase tracking-wide\">\n//               Trung bình\n//             </p>\n//             <p className=\"text-lg font-bold text-gray-900\">\n//               {Math.round(totalMinutes / sessions.length)}p\n//             </p>\n//           </div>\n//           <div className=\"text-center\">\n//             <p className=\"text-xs text-gray-500 uppercase tracking-wide\">\n//               Tasks\n//             </p>\n//             <p className=\"text-lg font-bold text-gray-900\">\n//               {new Set(sessions.map((s) => s.taskId)).size}\n//             </p>\n//           </div>\n//         </div>\n//       )}\n\n//       {/* Focus Heatmap - only show for week and month filters */}\n//       <FocusHeatmap\n//         sessions={sessions}\n//         tasks={tasks}\n//         filter={filter}\n//         dailyTargets={dailyTargets}\n//       />\n//     </div>\n//   );\n// };\n\n// export default HistoryView;","map":{"version":3,"names":[],"sources":["C:/Users/Vu/Documents/vscode/deepwork/deepwork/src/components/HistoryView.js"],"sourcesContent":["// import React, { useState, useMemo } from \"react\";\r\n// import { Bar } from \"react-chartjs-2\";\r\n// import {\r\n//   Chart as ChartJS,\r\n//   CategoryScale,\r\n//   LinearScale,\r\n//   BarElement,\r\n//   Title,\r\n//   Tooltip,\r\n//   Legend,\r\n// } from \"chart.js\";\r\n\r\n// ChartJS.register(\r\n//   CategoryScale,\r\n//   LinearScale,\r\n//   BarElement,\r\n//   Title,\r\n//   Tooltip,\r\n//   Legend\r\n// );\r\n\r\n// // Heatmap Component\r\n// const FocusHeatmap = ({ sessions, tasks, filter, dailyTargets = {} }) => {\r\n//   const [hoveredDate, setHoveredDate] = useState(null);\r\n//   const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\r\n\r\n//   // Calculate data for heatmap\r\n//   const heatmapData = useMemo(() => {\r\n//     const now = new Date();\r\n//     const dates = [];\r\n\r\n//     // Generate date range based on filter\r\n//     if (filter === \"week\") {\r\n//       // Get last 7 days\r\n//       for (let i = 6; i >= 0; i--) {\r\n//         const date = new Date(now);\r\n//         date.setDate(now.getDate() - i);\r\n//         dates.push(new Date(date));\r\n//       }\r\n//     } else if (filter === \"month\") {\r\n//       // Get all days in current month\r\n//       const year = now.getFullYear();\r\n//       const month = now.getMonth();\r\n//       const daysInMonth = new Date(year, month + 1, 0).getDate();\r\n\r\n//       for (let day = 1; day <= daysInMonth; day++) {\r\n//         dates.push(new Date(year, month, day));\r\n//       }\r\n//     }\r\n\r\n//     // Calculate focus time for each date\r\n//     return dates.map((date) => {\r\n//       const dateKey = date.toISOString().split(\"T\")[0];\r\n//       const dayStart = new Date(date);\r\n//       dayStart.setHours(0, 0, 0, 0);\r\n//       const dayEnd = new Date(date);\r\n//       dayEnd.setHours(23, 59, 59, 999);\r\n\r\n//       // Get sessions for this date\r\n//       const daySessions = sessions.filter((session) => {\r\n//         const sessionDate = new Date(session.completedAt);\r\n//         return sessionDate >= dayStart && sessionDate <= dayEnd;\r\n//       });\r\n\r\n//       const totalMinutes =\r\n//         daySessions.reduce((acc, session) => acc + session.duration, 0) / 60;\r\n//       const totalHours = totalMinutes / 60;\r\n//       const target = dailyTargets[dateKey];\r\n//       const targetMinutes = target?.targetMinutes || 0;\r\n//       const targetHours = targetMinutes / 60;\r\n\r\n//       // Determine color based on conditions\r\n//       let color = \"bg-gray-100\"; // Default: no activity\r\n//       let intensity = 0;\r\n\r\n//       if (target && targetMinutes > 0) {\r\n//         // Has target set\r\n//         if (totalMinutes >= targetMinutes) {\r\n//           // Target completed - green\r\n//           color = \"bg-green-500\";\r\n//           intensity = Math.min(totalHours / targetHours, 2); // Max intensity at 2x target\r\n//         } else {\r\n//           // Target not completed - red\r\n//           color = \"bg-red-500\";\r\n//           intensity = Math.max(0.3, totalMinutes / targetMinutes); // Min 30% intensity\r\n//         }\r\n//       } else {\r\n//         // No target set\r\n//         if (totalHours >= 1) {\r\n//           // >= 1h without target - blue\r\n//           color = \"bg-blue-500\";\r\n//           intensity = Math.min(totalHours / 3, 1); // Max intensity at 3h\r\n//         } else if (totalMinutes > 0) {\r\n//           // < 1h without target - orange-red\r\n//           color = \"bg-orange-600\";\r\n//           intensity = Math.max(0.2, totalMinutes / 60); // Min 20% intensity\r\n//         }\r\n//       }\r\n\r\n//       return {\r\n//         date,\r\n//         dateKey,\r\n//         totalMinutes: Math.round(totalMinutes),\r\n//         totalHours: Math.round(totalHours * 10) / 10,\r\n//         sessionCount: daySessions.length,\r\n//         target: targetMinutes,\r\n//         targetAchieved: targetMinutes > 0 && totalMinutes >= targetMinutes,\r\n//         color,\r\n//         intensity: Math.max(0.2, Math.min(intensity, 1)),\r\n//         tasks: [...new Set(daySessions.map((s) => s.taskId))].map(\r\n//           (taskId) => tasks.find((t) => t.id === taskId)?.name || \"Task đã xóa\"\r\n//         ),\r\n//       };\r\n//     });\r\n//   }, [sessions, tasks, filter, dailyTargets]);\r\n\r\n//   const handleMouseEnter = (dayData, event) => {\r\n//     setHoveredDate(dayData);\r\n//     setTooltipPosition({ x: event.clientX, y: event.clientY });\r\n//   };\r\n\r\n//   const handleMouseMove = (event) => {\r\n//     if (hoveredDate) {\r\n//       setTooltipPosition({ x: event.clientX, y: event.clientY });\r\n//     }\r\n//   };\r\n\r\n//   const handleMouseLeave = () => {\r\n//     setHoveredDate(null);\r\n//   };\r\n\r\n//   const formatDate = (date) => {\r\n//     return date.toLocaleDateString(\"vi-VN\", {\r\n//       day: \"2-digit\",\r\n//       month: \"2-digit\",\r\n//     });\r\n//   };\r\n\r\n//   const formatTime = (minutes) => {\r\n//     if (minutes >= 60) {\r\n//       const hours = Math.floor(minutes / 60);\r\n//       const mins = minutes % 60;\r\n//       return mins > 0 ? `${hours}h ${mins}p` : `${hours}h`;\r\n//     }\r\n//     return `${minutes}p`;\r\n//   };\r\n\r\n//   if (filter === \"day\") {\r\n//     return null; // Don't show heatmap for day filter\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\r\n//       <h3 className=\"text-md font-semibold text-gray-800 mb-3\">\r\n//         🔥 Heatmap tập trung {filter === \"week\" ? \"tuần này\" : \"tháng này\"}\r\n//       </h3>\r\n\r\n//       {/* Legend */}\r\n//       <div className=\"flex items-center space-x-4 mb-4 text-xs\">\r\n//         <span className=\"text-gray-600\">Ít</span>\r\n//         <div className=\"flex space-x-1\">\r\n//           <div className=\"w-3 h-3 bg-gray-100 rounded border\"></div>\r\n//           <div className=\"w-3 h-3 bg-orange-600 opacity-30 rounded\"></div>\r\n//           <div className=\"w-3 h-3 bg-blue-500 opacity-50 rounded\"></div>\r\n//           <div className=\"w-3 h-3 bg-green-500 opacity-70 rounded\"></div>\r\n//           <div className=\"w-3 h-3 bg-green-500 rounded\"></div>\r\n//           <div className=\"w-3 h-3 bg-red-500 rounded\"></div>\r\n//         </div>\r\n//         <span className=\"text-gray-600\">Nhiều</span>\r\n//         <div className=\"flex items-center space-x-2 ml-4 text-xs\">\r\n//           <div className=\"flex items-center space-x-1\">\r\n//             <div className=\"w-2 h-2 bg-green-500 rounded\"></div>\r\n//             <span>Đạt mục tiêu</span>\r\n//           </div>\r\n//           <div className=\"flex items-center space-x-1\">\r\n//             <div className=\"w-2 h-2 bg-red-500 rounded\"></div>\r\n//             <span>Chưa đạt mục tiêu</span>\r\n//           </div>\r\n//           <div className=\"flex items-center space-x-1\">\r\n//             <div className=\"w-2 h-2 bg-blue-500 rounded\"></div>\r\n//             <span>Không mục tiêu ≥1h</span>\r\n//           </div>\r\n//           <div className=\"flex items-center space-x-1\">\r\n//             <div className=\"w-2 h-2 bg-orange-600 rounded\"></div>\r\n//             <span>Không mục tiêu {\"<\"} 1h</span>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Heatmap Grid */}\r\n//       <div\r\n//         className={`grid gap-1 ${\r\n//           filter === \"week\"\r\n//             ? \"grid-cols-7\"\r\n//             : \"grid-cols-7 lg:grid-cols-10 xl:grid-cols-15\"\r\n//         }`}\r\n//       >\r\n//         {filter === \"week\" &&\r\n//           // Week day headers\r\n//           [\"CN\", \"T2\", \"T3\", \"T4\", \"T5\", \"T6\", \"T7\"].map((day) => (\r\n//             <div\r\n//               key={day}\r\n//               className=\"text-xs font-medium text-gray-500 text-center py-1\"\r\n//             >\r\n//               {day}\r\n//             </div>\r\n//           ))}\r\n\r\n//         {heatmapData.map((dayData, index) => (\r\n//           <div\r\n//             key={dayData.dateKey}\r\n//             className={`\r\n//               w-6 h-6 rounded cursor-pointer border border-gray-200\r\n//               ${dayData.color} hover:ring-2 hover:ring-gray-400 transition-all\r\n//               flex items-center justify-center text-xs font-medium\r\n//             `}\r\n//             style={{\r\n//               opacity: dayData.totalMinutes > 0 ? dayData.intensity : 0.1,\r\n//               color: dayData.totalMinutes > 0 ? \"white\" : \"#6b7280\",\r\n//             }}\r\n//             onMouseEnter={(e) => handleMouseEnter(dayData, e)}\r\n//             onMouseMove={handleMouseMove}\r\n//             onMouseLeave={handleMouseLeave}\r\n//             title={`${formatDate(dayData.date)}: ${formatTime(\r\n//               dayData.totalMinutes\r\n//             )}`}\r\n//           >\r\n//             {dayData.date.getDate()}\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n\r\n//       {/* Tooltip */}\r\n//       {hoveredDate && (\r\n//         <div\r\n//           className=\"fixed z-50 bg-gray-900 text-white text-xs rounded-lg p-3 shadow-lg pointer-events-none max-w-xs\"\r\n//           style={{\r\n//             left: tooltipPosition.x + 10,\r\n//             top: tooltipPosition.y - 10,\r\n//             transform: \"translateY(-100%)\",\r\n//           }}\r\n//         >\r\n//           <div className=\"font-semibold mb-1\">\r\n//             {hoveredDate.date.toLocaleDateString(\"vi-VN\", {\r\n//               weekday: \"long\",\r\n//               day: \"numeric\",\r\n//               month: \"long\",\r\n//             })}\r\n//           </div>\r\n\r\n//           <div className=\"space-y-1\">\r\n//             <div>\r\n//               ⏱️ Thời gian tập trung:{\" \"}\r\n//               <span className=\"font-semibold text-blue-300\">\r\n//                 {formatTime(hoveredDate.totalMinutes)}\r\n//               </span>\r\n//             </div>\r\n\r\n//             <div>\r\n//               📊 Số phiên:{\" \"}\r\n//               <span className=\"font-semibold\">{hoveredDate.sessionCount}</span>\r\n//             </div>\r\n\r\n//             {hoveredDate.target > 0 ? (\r\n//               <div>\r\n//                 🎯 Mục tiêu:{\" \"}\r\n//                 <span className=\"font-semibold\">\r\n//                   {formatTime(hoveredDate.target)}\r\n//                 </span>\r\n//                 <span\r\n//                   className={`ml-1 ${\r\n//                     hoveredDate.targetAchieved\r\n//                       ? \"text-green-400\"\r\n//                       : \"text-red-400\"\r\n//                   }`}\r\n//                 >\r\n//                   {hoveredDate.targetAchieved ? \"✅ Đạt\" : \"❌ Chưa đạt\"}\r\n//                 </span>\r\n//               </div>\r\n//             ) : (\r\n//               <div className=\"text-gray-400\">🎯 Không đặt mục tiêu</div>\r\n//             )}\r\n\r\n//             {hoveredDate.tasks.length > 0 && (\r\n//               <div>\r\n//                 📝 Tasks:{\" \"}\r\n//                 <span className=\"text-green-300\">\r\n//                   {hoveredDate.tasks.slice(0, 2).join(\", \")}\r\n//                   {hoveredDate.tasks.length > 2 &&\r\n//                     ` +${hoveredDate.tasks.length - 2} khác`}\r\n//                 </span>\r\n//               </div>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const HistoryView = ({\r\n//   sessions,\r\n//   tasks,\r\n//   filter,\r\n//   setFilter,\r\n//   dailyTargets = {},\r\n// }) => {\r\n//   // Existing chart data logic\r\n//   const chartData = React.useMemo(() => {\r\n//     const dataByTask = sessions.reduce((acc, session) => {\r\n//       const taskId = session.taskId;\r\n//       acc[taskId] = (acc[taskId] || 0) + session.duration;\r\n//       return acc;\r\n//     }, {});\r\n\r\n//     const taskMap = tasks.reduce((map, task) => {\r\n//       map[task.id] = task.name;\r\n//       return map;\r\n//     }, {});\r\n\r\n//     const labels = Object.keys(dataByTask).map(\r\n//       (taskId) => taskMap[taskId] || \"Task đã xóa\"\r\n//     );\r\n//     const data = Object.values(dataByTask).map((totalSeconds) =>\r\n//       Math.round(totalSeconds / 60)\r\n//     );\r\n\r\n//     return {\r\n//       labels,\r\n//       datasets: [\r\n//         {\r\n//           label: \"Thời gian tập trung (phút)\",\r\n//           data,\r\n//           backgroundColor: \"rgba(59, 130, 246, 0.8)\",\r\n//           borderColor: \"rgba(59, 130, 246, 1)\",\r\n//           borderWidth: 1,\r\n//           borderRadius: 4,\r\n//           borderSkipped: false,\r\n//         },\r\n//       ],\r\n//     };\r\n//   }, [sessions, tasks]);\r\n\r\n//   const chartOptions = {\r\n//     responsive: true,\r\n//     maintainAspectRatio: false,\r\n//     indexAxis: \"y\",\r\n//     plugins: {\r\n//       legend: {\r\n//         display: false,\r\n//       },\r\n//       title: {\r\n//         display: false,\r\n//       },\r\n//       tooltip: {\r\n//         callbacks: {\r\n//           label: function (context) {\r\n//             return `${context.parsed.x} phút`;\r\n//           },\r\n//         },\r\n//       },\r\n//     },\r\n//     scales: {\r\n//       x: {\r\n//         beginAtZero: true,\r\n//         ticks: {\r\n//           callback: function (value) {\r\n//             return value + \"p\";\r\n//           },\r\n//         },\r\n//         grid: {\r\n//           color: \"rgba(0, 0, 0, 0.1)\",\r\n//         },\r\n//       },\r\n//       y: {\r\n//         ticks: {\r\n//           maxRotation: 0,\r\n//           minRotation: 0,\r\n//           font: {\r\n//             size: 12,\r\n//           },\r\n//         },\r\n//         grid: {\r\n//           display: false,\r\n//         },\r\n//       },\r\n//     },\r\n//     elements: {\r\n//       bar: {\r\n//         borderWidth: 1,\r\n//       },\r\n//     },\r\n//   };\r\n\r\n//   const getFilterText = (filter) => {\r\n//     if (filter === \"day\") return \"hôm nay\";\r\n//     if (filter === \"week\") return \"tuần này\";\r\n//     if (filter === \"month\") return \"tháng này\";\r\n//     return \"\";\r\n//   };\r\n\r\n//   // Calculate total focus time for current filter\r\n//   const totalMinutes =\r\n//     sessions.reduce((acc, session) => acc + session.duration, 0) / 60;\r\n//   const totalHours = Math.floor(totalMinutes / 60);\r\n//   const remainingMinutes = Math.round(totalMinutes % 60);\r\n\r\n//   const formatTotalTime = () => {\r\n//     if (totalHours > 0) {\r\n//       return `${totalHours} giờ ${remainingMinutes} phút`;\r\n//     }\r\n//     return `${Math.round(totalMinutes)} phút`;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"bg-white rounded-lg p-4 mb-4 shadow-sm border border-gray-200\">\r\n//       {/* Header */}\r\n//       <div className=\"flex justify-between items-center mb-4\">\r\n//         <div>\r\n//           <h2 className=\"text-lg font-semibold text-gray-900\">\r\n//             📊 Thống kê {getFilterText(filter)}\r\n//           </h2>\r\n//           {sessions.length > 0 && (\r\n//             <p className=\"text-sm text-gray-600 mt-1\">\r\n//               Tổng cộng:{\" \"}\r\n//               <span className=\"font-semibold text-blue-600\">\r\n//                 {formatTotalTime()}\r\n//               </span>{\" \"}\r\n//               ({sessions.length} phiên)\r\n//             </p>\r\n//           )}\r\n//         </div>\r\n\r\n//         <div className=\"flex space-x-1 bg-gray-100 rounded-lg p-1\">\r\n//           {[\"day\", \"week\", \"month\"].map((f) => (\r\n//             <button\r\n//               key={f}\r\n//               onClick={() => setFilter(f)}\r\n//               className={`px-3 py-1 text-sm font-medium rounded-md transition-colors ${\r\n//                 filter === f\r\n//                   ? \"bg-white text-blue-600 shadow-sm\"\r\n//                   : \"text-gray-600 hover:text-gray-900\"\r\n//               }`}\r\n//             >\r\n//               {f === \"day\" ? \"Ngày\" : f === \"week\" ? \"Tuần\" : \"Tháng\"}\r\n//             </button>\r\n//           ))}\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Chart */}\r\n//       {sessions.length > 0 ? (\r\n//         <div style={{ height: \"250px\" }}>\r\n//           <Bar data={chartData} options={chartOptions} />\r\n//         </div>\r\n//       ) : (\r\n//         <div className=\"text-center py-12 text-gray-500\">\r\n//           <div className=\"text-5xl mb-3\">📈</div>\r\n//           <h3 className=\"text-lg font-medium text-gray-700 mb-2\">\r\n//             Chưa có dữ liệu {getFilterText(filter)}\r\n//           </h3>\r\n//           <p className=\"text-sm\">\r\n//             Bắt đầu một phiên làm việc để xem thống kê tại đây\r\n//           </p>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Quick Stats */}\r\n//       {sessions.length > 0 && (\r\n//         <div className=\"mt-4 grid grid-cols-3 gap-4 pt-4 border-t border-gray-100\">\r\n//           <div className=\"text-center\">\r\n//             <p className=\"text-xs text-gray-500 uppercase tracking-wide\">\r\n//               Phiên\r\n//             </p>\r\n//             <p className=\"text-lg font-bold text-gray-900\">{sessions.length}</p>\r\n//           </div>\r\n//           <div className=\"text-center\">\r\n//             <p className=\"text-xs text-gray-500 uppercase tracking-wide\">\r\n//               Trung bình\r\n//             </p>\r\n//             <p className=\"text-lg font-bold text-gray-900\">\r\n//               {Math.round(totalMinutes / sessions.length)}p\r\n//             </p>\r\n//           </div>\r\n//           <div className=\"text-center\">\r\n//             <p className=\"text-xs text-gray-500 uppercase tracking-wide\">\r\n//               Tasks\r\n//             </p>\r\n//             <p className=\"text-lg font-bold text-gray-900\">\r\n//               {new Set(sessions.map((s) => s.taskId)).size}\r\n//             </p>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Focus Heatmap - only show for week and month filters */}\r\n//       <FocusHeatmap\r\n//         sessions={sessions}\r\n//         tasks={tasks}\r\n//         filter={filter}\r\n//         dailyTargets={dailyTargets}\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default HistoryView;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}