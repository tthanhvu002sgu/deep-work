{"ast":null,"code":"class FileStorageService {\n  constructor() {\n    this.fileName = 'deepwork-data.json';\n    this.data = this.getInitialData();\n    this.fileHandle = null;\n    this.isFileAPISupported = 'showSaveFilePicker' in window;\n\n    // Load data from file or localStorage on init\n    this.loadData();\n\n    // Auto-save every 30 seconds\n    this.autoSaveInterval = setInterval(() => {\n      this.saveData();\n    }, 30000);\n\n    // Save before page unload\n    window.addEventListener('beforeunload', () => {\n      this.saveData();\n    });\n  }\n\n  // Get initial data structure\n  getInitialData() {\n    return {\n      tasks: [],\n      sessions: [],\n      dailyTargets: {},\n      settings: {\n        defaultWorkDuration: 25,\n        defaultBreakDuration: 5,\n        defaultLongBreakDuration: 15,\n        soundEnabled: true,\n        notificationEnabled: true,\n        autoStartBreaks: false,\n        darkMode: false\n      },\n      metadata: {\n        created: new Date().toISOString(),\n        version: '1.0.0',\n        lastSaved: new Date().toISOString()\n      }\n    };\n  }\n\n  // Load data from file or localStorage\n  async loadData() {\n    try {\n      // First try to load from localStorage (fallback)\n      const localData = this.loadFromLocalStorage();\n      if (localData) {\n        this.data = {\n          ...this.getInitialData(),\n          ...localData\n        };\n      }\n\n      // If File API is supported, try to load from file\n      if (this.isFileAPISupported) {\n        const savedFileHandle = localStorage.getItem('deepwork_file_handle');\n        if (savedFileHandle) {\n          try {\n            // Note: File handles can't be serialized, so we'll ask user to select file again\n            console.log('File API supported but need user to select file again');\n          } catch (error) {\n            console.warn('Could not restore file handle:', error);\n          }\n        }\n      }\n      console.log('Data loaded successfully:', this.data);\n    } catch (error) {\n      console.error('Error loading data:', error);\n      this.data = this.getInitialData();\n    }\n  }\n\n  // Load from localStorage as fallback\n  loadFromLocalStorage() {\n    try {\n      const tasks = JSON.parse(localStorage.getItem('deepwork_tasks_v3') || '[]');\n      const sessions = JSON.parse(localStorage.getItem('deepwork_sessions_v3') || '[]');\n      const dailyTargets = JSON.parse(localStorage.getItem('deepwork_daily_targets') || '{}');\n      const settings = JSON.parse(localStorage.getItem('deepwork_settings') || '{}');\n      if (tasks.length > 0 || sessions.length > 0) {\n        return {\n          tasks,\n          sessions,\n          dailyTargets,\n          settings: {\n            ...this.getInitialData().settings,\n            ...settings\n          }\n        };\n      }\n    } catch (error) {\n      console.error('Error loading from localStorage:', error);\n    }\n    return null;\n  }\n\n  // Save data to file and localStorage\n  async saveData() {\n    try {\n      // Always save to localStorage as backup\n      this.saveToLocalStorage();\n\n      // Try to save to file if supported\n      if (this.isFileAPISupported && this.fileHandle) {\n        await this.saveToFile();\n      }\n      console.log('Data saved successfully');\n    } catch (error) {\n      console.error('Error saving data:', error);\n      // At least localStorage should work\n      this.saveToLocalStorage();\n    }\n  }\n\n  // Save to localStorage\n  saveToLocalStorage() {\n    try {\n      const dataToSave = {\n        ...this.data,\n        metadata: {\n          ...this.data.metadata,\n          lastSaved: new Date().toISOString()\n        }\n      };\n      localStorage.setItem('deepwork_tasks_v3', JSON.stringify(dataToSave.tasks));\n      localStorage.setItem('deepwork_sessions_v3', JSON.stringify(dataToSave.sessions));\n      localStorage.setItem('deepwork_daily_targets', JSON.stringify(dataToSave.dailyTargets));\n      localStorage.setItem('deepwork_settings', JSON.stringify(dataToSave.settings));\n      localStorage.setItem('deepwork_metadata', JSON.stringify(dataToSave.metadata));\n      console.log('Saved to localStorage');\n    } catch (error) {\n      console.error('Error saving to localStorage:', error);\n      throw error;\n    }\n  }\n\n  // Save to file using File System Access API\n  async saveToFile() {\n    try {\n      if (!this.fileHandle) {\n        await this.selectFile();\n      }\n      const dataToSave = {\n        ...this.data,\n        metadata: {\n          ...this.data.metadata,\n          lastSaved: new Date().toISOString()\n        }\n      };\n      const writable = await this.fileHandle.createWritable();\n      await writable.write(JSON.stringify(dataToSave, null, 2));\n      await writable.close();\n      console.log('Saved to file successfully');\n    } catch (error) {\n      console.error('Error saving to file:', error);\n      // Don't throw error, fallback to localStorage\n    }\n  }\n\n  // Let user select file to save/load\n  async selectFile() {\n    try {\n      if (!this.isFileAPISupported) {\n        throw new Error('File System Access API not supported');\n      }\n      this.fileHandle = await window.showSaveFilePicker({\n        suggestedName: this.fileName,\n        types: [{\n          description: 'JSON files',\n          accept: {\n            'application/json': ['.json']\n          }\n        }]\n      });\n      return this.fileHandle;\n    } catch (error) {\n      console.error('Error selecting file:', error);\n      throw error;\n    }\n  }\n\n  // Load from selected file\n  async loadFromFile() {\n    try {\n      if (!this.isFileAPISupported) {\n        throw new Error('File System Access API not supported');\n      }\n      const [fileHandle] = await window.showOpenFilePicker({\n        types: [{\n          description: 'JSON files',\n          accept: {\n            'application/json': ['.json']\n          }\n        }]\n      });\n      const file = await fileHandle.getFile();\n      const content = await file.text();\n      const importedData = JSON.parse(content);\n\n      // Validate data structure\n      if (!importedData.tasks || !Array.isArray(importedData.tasks)) {\n        throw new Error('Invalid data format: tasks must be an array');\n      }\n      if (!importedData.sessions || !Array.isArray(importedData.sessions)) {\n        throw new Error('Invalid data format: sessions must be an array');\n      }\n\n      // Merge with current data\n      this.data = {\n        ...this.getInitialData(),\n        ...importedData,\n        metadata: {\n          ...importedData.metadata,\n          lastLoaded: new Date().toISOString()\n        }\n      };\n\n      // Save the file handle for future saves\n      this.fileHandle = fileHandle;\n\n      // Update localStorage backup\n      this.saveToLocalStorage();\n      console.log('Data loaded from file successfully');\n      return this.data;\n    } catch (error) {\n      console.error('Error loading from file:', error);\n      throw error;\n    }\n  }\n\n  // Download data as JSON file (fallback for unsupported browsers)\n  downloadAsFile() {\n    try {\n      const dataToSave = {\n        ...this.data,\n        metadata: {\n          ...this.data.metadata,\n          exportedAt: new Date().toISOString()\n        }\n      };\n      const dataStr = JSON.stringify(dataToSave, null, 2);\n      const dataBlob = new Blob([dataStr], {\n        type: 'application/json'\n      });\n      const url = URL.createObjectURL(dataBlob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `deepwork-data-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n      console.log('File downloaded successfully');\n    } catch (error) {\n      console.error('Error downloading file:', error);\n      throw error;\n    }\n  }\n\n  // Upload file input (fallback for unsupported browsers)\n  async uploadFromInput(file) {\n    try {\n      const content = await file.text();\n      const importedData = JSON.parse(content);\n\n      // Validate data structure\n      if (!importedData.tasks || !Array.isArray(importedData.tasks)) {\n        throw new Error('Invalid data format: tasks must be an array');\n      }\n\n      // Merge with current data\n      this.data = {\n        ...this.getInitialData(),\n        ...importedData,\n        metadata: {\n          ...importedData.metadata,\n          lastLoaded: new Date().toISOString()\n        }\n      };\n\n      // Update localStorage backup\n      this.saveToLocalStorage();\n      console.log('Data uploaded successfully');\n      return this.data;\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error;\n    }\n  }\n\n  // Tasks operations\n  async getTasks() {\n    return this.data.tasks.filter(task => !task.isArchived);\n  }\n  async addTask(taskName, description = null, defaultDuration = 25, color = '#3B82F6') {\n    const newTask = {\n      id: Date.now(),\n      name: taskName,\n      description,\n      defaultDuration,\n      color,\n      isArchived: false,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    this.data.tasks.push(newTask);\n    this.saveData();\n    return newTask;\n  }\n  async deleteTask(taskId) {\n    // Remove task and all related sessions\n    this.data.tasks = this.data.tasks.filter(task => task.id !== taskId);\n    this.data.sessions = this.data.sessions.filter(session => session.taskId !== taskId);\n    this.saveData();\n    return true;\n  }\n\n  // Sessions operations\n  async getSessions() {\n    return this.data.sessions;\n  }\n  async addSession(taskId, duration, plannedDuration = null) {\n    const newSession = {\n      id: Date.now(),\n      taskId: taskId,\n      duration: duration,\n      plannedDuration: plannedDuration,\n      sessionType: 'work',\n      completedAt: new Date().toISOString(),\n      createdAt: new Date().toISOString()\n    };\n    this.data.sessions.push(newSession);\n    this.saveData();\n    return newSession;\n  }\n\n  // Daily targets operations\n  async getDailyTarget(date = null) {\n    const targetDate = date || new Date().toISOString().split('T')[0];\n    const target = this.data.dailyTargets[targetDate];\n    return {\n      targetMinutes: (target === null || target === void 0 ? void 0 : target.targetMinutes) || 0,\n      targetDate: targetDate\n    };\n  }\n  async setDailyTarget(targetMinutes, date = null) {\n    var _this$data$dailyTarge;\n    const targetDate = date || new Date().toISOString().split('T')[0];\n    this.data.dailyTargets[targetDate] = {\n      targetMinutes,\n      targetDate,\n      createdAt: ((_this$data$dailyTarge = this.data.dailyTargets[targetDate]) === null || _this$data$dailyTarge === void 0 ? void 0 : _this$data$dailyTarge.createdAt) || new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    this.saveData();\n    return this.data.dailyTargets[targetDate];\n  }\n\n  // Force save (manual save)\n  async forceSave() {\n    console.log('🔧 Force saving all data...');\n    try {\n      // Save to localStorage immediately\n      this.saveToLocalStorage();\n\n      // If file handle exists, save to file too\n      if (this.isFileAPISupported && this.fileHandle) {\n        await this.saveToFile();\n      }\n\n      // Additional delay to ensure filesystem operations complete\n      await new Promise(resolve => setTimeout(resolve, 100));\n      console.log('✅ Force save completed');\n      return true;\n    } catch (error) {\n      console.error('❌ Force save failed:', error);\n      // Don't throw - at least localStorage should work\n      return false;\n    }\n  }\n\n  // Check if File API is supported\n  isFileAPIAvailable() {\n    return this.isFileAPISupported;\n  }\n\n  // Get current file status\n  getFileStatus() {\n    var _this$fileHandle, _this$data$metadata;\n    return {\n      isFileAPISupported: this.isFileAPISupported,\n      hasFileHandle: !!this.fileHandle,\n      fileName: ((_this$fileHandle = this.fileHandle) === null || _this$fileHandle === void 0 ? void 0 : _this$fileHandle.name) || 'Chưa chọn file',\n      lastSaved: (_this$data$metadata = this.data.metadata) === null || _this$data$metadata === void 0 ? void 0 : _this$data$metadata.lastSaved\n    };\n  }\n\n  // Cleanup\n  cleanup() {\n    if (this.autoSaveInterval) {\n      clearInterval(this.autoSaveInterval);\n    }\n  }\n}\nexport default new FileStorageService();","map":{"version":3,"names":["FileStorageService","constructor","fileName","data","getInitialData","fileHandle","isFileAPISupported","window","loadData","autoSaveInterval","setInterval","saveData","addEventListener","tasks","sessions","dailyTargets","settings","defaultWorkDuration","defaultBreakDuration","defaultLongBreakDuration","soundEnabled","notificationEnabled","autoStartBreaks","darkMode","metadata","created","Date","toISOString","version","lastSaved","localData","loadFromLocalStorage","savedFileHandle","localStorage","getItem","console","log","error","warn","JSON","parse","length","saveToLocalStorage","saveToFile","dataToSave","setItem","stringify","selectFile","writable","createWritable","write","close","Error","showSaveFilePicker","suggestedName","types","description","accept","loadFromFile","showOpenFilePicker","file","getFile","content","text","importedData","Array","isArray","lastLoaded","downloadAsFile","exportedAt","dataStr","dataBlob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","split","body","appendChild","click","removeChild","revokeObjectURL","uploadFromInput","getTasks","filter","task","isArchived","addTask","taskName","defaultDuration","color","newTask","id","now","name","createdAt","updatedAt","push","deleteTask","taskId","session","getSessions","addSession","duration","plannedDuration","newSession","sessionType","completedAt","getDailyTarget","date","targetDate","target","targetMinutes","setDailyTarget","_this$data$dailyTarge","forceSave","Promise","resolve","setTimeout","isFileAPIAvailable","getFileStatus","_this$fileHandle","_this$data$metadata","hasFileHandle","cleanup","clearInterval"],"sources":["C:/Users/Vu/Documents/vscode/deepwork/deepwork/src/services/fileStorageService.js"],"sourcesContent":["class FileStorageService {\r\n  constructor() {\r\n    this.fileName = 'deepwork-data.json';\r\n    this.data = this.getInitialData();\r\n    this.fileHandle = null;\r\n    this.isFileAPISupported = 'showSaveFilePicker' in window;\r\n    \r\n    // Load data from file or localStorage on init\r\n    this.loadData();\r\n    \r\n    // Auto-save every 30 seconds\r\n    this.autoSaveInterval = setInterval(() => {\r\n      this.saveData();\r\n    }, 30000);\r\n    \r\n    // Save before page unload\r\n    window.addEventListener('beforeunload', () => {\r\n      this.saveData();\r\n    });\r\n  }\r\n\r\n  // Get initial data structure\r\n  getInitialData() {\r\n    return {\r\n      tasks: [],\r\n      sessions: [],\r\n      dailyTargets: {},\r\n      settings: {\r\n        defaultWorkDuration: 25,\r\n        defaultBreakDuration: 5,\r\n        defaultLongBreakDuration: 15,\r\n        soundEnabled: true,\r\n        notificationEnabled: true,\r\n        autoStartBreaks: false,\r\n        darkMode: false\r\n      },\r\n      metadata: {\r\n        created: new Date().toISOString(),\r\n        version: '1.0.0',\r\n        lastSaved: new Date().toISOString()\r\n      }\r\n    };\r\n  }\r\n\r\n  // Load data from file or localStorage\r\n  async loadData() {\r\n    try {\r\n      // First try to load from localStorage (fallback)\r\n      const localData = this.loadFromLocalStorage();\r\n      if (localData) {\r\n        this.data = { ...this.getInitialData(), ...localData };\r\n      }\r\n\r\n      // If File API is supported, try to load from file\r\n      if (this.isFileAPISupported) {\r\n        const savedFileHandle = localStorage.getItem('deepwork_file_handle');\r\n        if (savedFileHandle) {\r\n          try {\r\n            // Note: File handles can't be serialized, so we'll ask user to select file again\r\n            console.log('File API supported but need user to select file again');\r\n          } catch (error) {\r\n            console.warn('Could not restore file handle:', error);\r\n          }\r\n        }\r\n      }\r\n      \r\n      console.log('Data loaded successfully:', this.data);\r\n    } catch (error) {\r\n      console.error('Error loading data:', error);\r\n      this.data = this.getInitialData();\r\n    }\r\n  }\r\n\r\n  // Load from localStorage as fallback\r\n  loadFromLocalStorage() {\r\n    try {\r\n      const tasks = JSON.parse(localStorage.getItem('deepwork_tasks_v3') || '[]');\r\n      const sessions = JSON.parse(localStorage.getItem('deepwork_sessions_v3') || '[]');\r\n      const dailyTargets = JSON.parse(localStorage.getItem('deepwork_daily_targets') || '{}');\r\n      const settings = JSON.parse(localStorage.getItem('deepwork_settings') || '{}');\r\n      \r\n      if (tasks.length > 0 || sessions.length > 0) {\r\n        return {\r\n          tasks,\r\n          sessions,\r\n          dailyTargets,\r\n          settings: { ...this.getInitialData().settings, ...settings }\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading from localStorage:', error);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Save data to file and localStorage\r\n  async saveData() {\r\n    try {\r\n      // Always save to localStorage as backup\r\n      this.saveToLocalStorage();\r\n      \r\n      // Try to save to file if supported\r\n      if (this.isFileAPISupported && this.fileHandle) {\r\n        await this.saveToFile();\r\n      }\r\n      \r\n      console.log('Data saved successfully');\r\n    } catch (error) {\r\n      console.error('Error saving data:', error);\r\n      // At least localStorage should work\r\n      this.saveToLocalStorage();\r\n    }\r\n  }\r\n\r\n  // Save to localStorage\r\n  saveToLocalStorage() {\r\n    try {\r\n      const dataToSave = {\r\n        ...this.data,\r\n        metadata: {\r\n          ...this.data.metadata,\r\n          lastSaved: new Date().toISOString()\r\n        }\r\n      };\r\n\r\n      localStorage.setItem('deepwork_tasks_v3', JSON.stringify(dataToSave.tasks));\r\n      localStorage.setItem('deepwork_sessions_v3', JSON.stringify(dataToSave.sessions));\r\n      localStorage.setItem('deepwork_daily_targets', JSON.stringify(dataToSave.dailyTargets));\r\n      localStorage.setItem('deepwork_settings', JSON.stringify(dataToSave.settings));\r\n      localStorage.setItem('deepwork_metadata', JSON.stringify(dataToSave.metadata));\r\n      \r\n      console.log('Saved to localStorage');\r\n    } catch (error) {\r\n      console.error('Error saving to localStorage:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Save to file using File System Access API\r\n  async saveToFile() {\r\n    try {\r\n      if (!this.fileHandle) {\r\n        await this.selectFile();\r\n      }\r\n\r\n      const dataToSave = {\r\n        ...this.data,\r\n        metadata: {\r\n          ...this.data.metadata,\r\n          lastSaved: new Date().toISOString()\r\n        }\r\n      };\r\n\r\n      const writable = await this.fileHandle.createWritable();\r\n      await writable.write(JSON.stringify(dataToSave, null, 2));\r\n      await writable.close();\r\n      \r\n      console.log('Saved to file successfully');\r\n    } catch (error) {\r\n      console.error('Error saving to file:', error);\r\n      // Don't throw error, fallback to localStorage\r\n    }\r\n  }\r\n\r\n  // Let user select file to save/load\r\n  async selectFile() {\r\n    try {\r\n      if (!this.isFileAPISupported) {\r\n        throw new Error('File System Access API not supported');\r\n      }\r\n\r\n      this.fileHandle = await window.showSaveFilePicker({\r\n        suggestedName: this.fileName,\r\n        types: [{\r\n          description: 'JSON files',\r\n          accept: { 'application/json': ['.json'] }\r\n        }]\r\n      });\r\n\r\n      return this.fileHandle;\r\n    } catch (error) {\r\n      console.error('Error selecting file:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Load from selected file\r\n  async loadFromFile() {\r\n    try {\r\n      if (!this.isFileAPISupported) {\r\n        throw new Error('File System Access API not supported');\r\n      }\r\n\r\n      const [fileHandle] = await window.showOpenFilePicker({\r\n        types: [{\r\n          description: 'JSON files',\r\n          accept: { 'application/json': ['.json'] }\r\n        }]\r\n      });\r\n\r\n      const file = await fileHandle.getFile();\r\n      const content = await file.text();\r\n      const importedData = JSON.parse(content);\r\n\r\n      // Validate data structure\r\n      if (!importedData.tasks || !Array.isArray(importedData.tasks)) {\r\n        throw new Error('Invalid data format: tasks must be an array');\r\n      }\r\n\r\n      if (!importedData.sessions || !Array.isArray(importedData.sessions)) {\r\n        throw new Error('Invalid data format: sessions must be an array');\r\n      }\r\n\r\n      // Merge with current data\r\n      this.data = {\r\n        ...this.getInitialData(),\r\n        ...importedData,\r\n        metadata: {\r\n          ...importedData.metadata,\r\n          lastLoaded: new Date().toISOString()\r\n        }\r\n      };\r\n\r\n      // Save the file handle for future saves\r\n      this.fileHandle = fileHandle;\r\n      \r\n      // Update localStorage backup\r\n      this.saveToLocalStorage();\r\n      \r\n      console.log('Data loaded from file successfully');\r\n      return this.data;\r\n    } catch (error) {\r\n      console.error('Error loading from file:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Download data as JSON file (fallback for unsupported browsers)\r\n  downloadAsFile() {\r\n    try {\r\n      const dataToSave = {\r\n        ...this.data,\r\n        metadata: {\r\n          ...this.data.metadata,\r\n          exportedAt: new Date().toISOString()\r\n        }\r\n      };\r\n\r\n      const dataStr = JSON.stringify(dataToSave, null, 2);\r\n      const dataBlob = new Blob([dataStr], { type: 'application/json' });\r\n      const url = URL.createObjectURL(dataBlob);\r\n      \r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `deepwork-data-${new Date().toISOString().split('T')[0]}.json`;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      \r\n      URL.revokeObjectURL(url);\r\n      console.log('File downloaded successfully');\r\n    } catch (error) {\r\n      console.error('Error downloading file:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Upload file input (fallback for unsupported browsers)\r\n  async uploadFromInput(file) {\r\n    try {\r\n      const content = await file.text();\r\n      const importedData = JSON.parse(content);\r\n\r\n      // Validate data structure\r\n      if (!importedData.tasks || !Array.isArray(importedData.tasks)) {\r\n        throw new Error('Invalid data format: tasks must be an array');\r\n      }\r\n\r\n      // Merge with current data\r\n      this.data = {\r\n        ...this.getInitialData(),\r\n        ...importedData,\r\n        metadata: {\r\n          ...importedData.metadata,\r\n          lastLoaded: new Date().toISOString()\r\n        }\r\n      };\r\n\r\n      // Update localStorage backup\r\n      this.saveToLocalStorage();\r\n      \r\n      console.log('Data uploaded successfully');\r\n      return this.data;\r\n    } catch (error) {\r\n      console.error('Error uploading file:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Tasks operations\r\n  async getTasks() {\r\n    return this.data.tasks.filter(task => !task.isArchived);\r\n  }\r\n\r\n  async addTask(taskName, description = null, defaultDuration = 25, color = '#3B82F6') {\r\n    const newTask = {\r\n      id: Date.now(),\r\n      name: taskName,\r\n      description,\r\n      defaultDuration,\r\n      color,\r\n      isArchived: false,\r\n      createdAt: new Date().toISOString(),\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n\r\n    this.data.tasks.push(newTask);\r\n    this.saveData();\r\n    \r\n    return newTask;\r\n  }\r\n\r\n  async deleteTask(taskId) {\r\n    // Remove task and all related sessions\r\n    this.data.tasks = this.data.tasks.filter(task => task.id !== taskId);\r\n    this.data.sessions = this.data.sessions.filter(session => session.taskId !== taskId);\r\n    \r\n    this.saveData();\r\n    return true;\r\n  }\r\n\r\n  // Sessions operations\r\n  async getSessions() {\r\n    return this.data.sessions;\r\n  }\r\n\r\n  async addSession(taskId, duration, plannedDuration = null) {\r\n    const newSession = {\r\n      id: Date.now(),\r\n      taskId: taskId,\r\n      duration: duration,\r\n      plannedDuration: plannedDuration,\r\n      sessionType: 'work',\r\n      completedAt: new Date().toISOString(),\r\n      createdAt: new Date().toISOString()\r\n    };\r\n\r\n    this.data.sessions.push(newSession);\r\n    this.saveData();\r\n    \r\n    return newSession;\r\n  }\r\n\r\n  // Daily targets operations\r\n  async getDailyTarget(date = null) {\r\n    const targetDate = date || new Date().toISOString().split('T')[0];\r\n    const target = this.data.dailyTargets[targetDate];\r\n    \r\n    return {\r\n      targetMinutes: target?.targetMinutes || 0,\r\n      targetDate: targetDate\r\n    };\r\n  }\r\n\r\n  async setDailyTarget(targetMinutes, date = null) {\r\n    const targetDate = date || new Date().toISOString().split('T')[0];\r\n    \r\n    this.data.dailyTargets[targetDate] = {\r\n      targetMinutes,\r\n      targetDate,\r\n      createdAt: this.data.dailyTargets[targetDate]?.createdAt || new Date().toISOString(),\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n\r\n    this.saveData();\r\n    return this.data.dailyTargets[targetDate];\r\n  }\r\n\r\n  // Force save (manual save)\r\n  async forceSave() {\r\n    console.log('🔧 Force saving all data...');\r\n    \r\n    try {\r\n      // Save to localStorage immediately\r\n      this.saveToLocalStorage();\r\n      \r\n      // If file handle exists, save to file too\r\n      if (this.isFileAPISupported && this.fileHandle) {\r\n        await this.saveToFile();\r\n      }\r\n      \r\n      // Additional delay to ensure filesystem operations complete\r\n      await new Promise(resolve => setTimeout(resolve, 100));\r\n      \r\n      console.log('✅ Force save completed');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('❌ Force save failed:', error);\r\n      // Don't throw - at least localStorage should work\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Check if File API is supported\r\n  isFileAPIAvailable() {\r\n    return this.isFileAPISupported;\r\n  }\r\n\r\n  // Get current file status\r\n  getFileStatus() {\r\n    return {\r\n      isFileAPISupported: this.isFileAPISupported,\r\n      hasFileHandle: !!this.fileHandle,\r\n      fileName: this.fileHandle?.name || 'Chưa chọn file',\r\n      lastSaved: this.data.metadata?.lastSaved\r\n    };\r\n  }\r\n\r\n  // Cleanup\r\n  cleanup() {\r\n    if (this.autoSaveInterval) {\r\n      clearInterval(this.autoSaveInterval);\r\n    }\r\n  }\r\n}\r\n\r\nexport default new FileStorageService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}