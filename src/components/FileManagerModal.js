import React, { useState, useEffect } from 'react';
import fileStorageService from '../services/fileStorageService';

export const FileManagerModal = ({ onClose, onSuccess }) => {
  const [fileStatus, setFileStatus] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState(null);
  const [uploadFile, setUploadFile] = useState(null);

  useEffect(() => {
    setFileStatus(fileStorageService.getFileStatus());
  }, []);

  const handleSelectFile = async () => {
    setIsLoading(true);
    setMessage(null);
    
    try {
      await fileStorageService.selectFile();
      setFileStatus(fileStorageService.getFileStatus());
      setMessage({
        type: 'success',
        text: 'ƒê√£ ch·ªçn file th√†nh c√¥ng! D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông.'
      });
    } catch (error) {
      console.error('Error selecting file:', error);
      setMessage({
        type: 'error',
        text: 'Kh√¥ng th·ªÉ ch·ªçn file: ' + error.message
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleLoadFromFile = async () => {
    setIsLoading(true);
    setMessage(null);
    
    try {
      await fileStorageService.loadFromFile();
      setFileStatus(fileStorageService.getFileStatus());
      setMessage({
        type: 'success',
        text: 'ƒê√£ t·∫£i d·ªØ li·ªáu t·ª´ file th√†nh c√¥ng!'
      });
      
      setTimeout(() => {
        onSuccess && onSuccess();
        onClose();
      }, 1500);
    } catch (error) {
      console.error('Error loading from file:', error);
      setMessage({
        type: 'error',
        text: 'Kh√¥ng th·ªÉ t·∫£i file: ' + error.message
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleDownload = () => {
    try {
      fileStorageService.downloadAsFile();
      setMessage({
        type: 'success',
        text: 'File ƒë√£ ƒë∆∞·ª£c t·∫£i xu·ªëng th√†nh c√¥ng!'
      });
    } catch (error) {
      console.error('Error downloading file:', error);
      setMessage({
        type: 'error',
        text: 'Kh√¥ng th·ªÉ t·∫£i xu·ªëng: ' + error.message
      });
    }
  };

  const handleFileUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    setIsLoading(true);
    setMessage(null);
    
    try {
      await fileStorageService.uploadFromInput(file);
      setMessage({
        type: 'success',
        text: 'ƒê√£ t·∫£i l√™n d·ªØ li·ªáu th√†nh c√¥ng!'
      });
      
      setTimeout(() => {
        onSuccess && onSuccess();
        onClose();
      }, 1500);
    } catch (error) {
      console.error('Error uploading file:', error);
      setMessage({
        type: 'error',
        text: 'Kh√¥ng th·ªÉ t·∫£i l√™n: ' + error.message
      });
    } finally {
      setIsLoading(false);
      event.target.value = ''; // Reset input
    }
  };

  const handleForceSave = async () => {
    setIsLoading(true);
    setMessage(null);
    
    try {
      await fileStorageService.forceSave();
      setMessage({
        type: 'success',
        text: 'ƒê√£ l∆∞u d·ªØ li·ªáu th√†nh c√¥ng!'
      });
    } catch (error) {
      console.error('Error force saving:', error);
      setMessage({
        type: 'error',
        text: 'Kh√¥ng th·ªÉ l∆∞u: ' + error.message
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4">
      <div className="bg-white rounded-lg p-6 shadow-xl max-w-md w-full max-h-[90vh] overflow-y-auto">
        <h3 className="text-lg font-bold mb-4">üìÅ Qu·∫£n l√Ω File D·ªØ li·ªáu</h3>
        
        {/* File Status */}
        {fileStatus && (
          <div className="mb-4 p-3 bg-gray-50 rounded-lg">
            <h4 className="font-semibold text-sm mb-2">Tr·∫°ng th√°i:</h4>
            <div className="text-xs space-y-1">
              <div>
                API h·ªó tr·ª£: {fileStatus.isFileAPISupported ? '‚úÖ C√≥' : '‚ùå Kh√¥ng'}
              </div>
              {fileStatus.isFileAPISupported && (
                <div>
                  File ƒë√£ ch·ªçn: {fileStatus.hasFileHandle ? '‚úÖ ' + fileStatus.fileName : '‚ùå Ch∆∞a ch·ªçn'}
                </div>
              )}
              <div>
                L·∫ßn l∆∞u cu·ªëi: {fileStatus.lastSaved ? new Date(fileStatus.lastSaved).toLocaleString('vi-VN') : 'Ch∆∞a c√≥'}
              </div>
            </div>
          </div>
        )}

        {/* Message Display */}
        {message && (
          <div className={`p-3 rounded-lg mb-4 ${
            message.type === 'error' 
              ? 'bg-red-50 text-red-700 border border-red-200'
              : 'bg-green-50 text-green-700 border border-green-200'
          }`}>
            <p className="text-sm">{message.text}</p>
          </div>
        )}

        <div className="space-y-4">
          {/* Modern File API Section */}
          {fileStatus?.isFileAPISupported ? (
            <div className="border rounded-lg p-4">
              <h4 className="font-semibold mb-2">üîÑ ƒê·ªìng b·ªô v·ªõi File C·ª•c b·ªô</h4>
              <p className="text-sm text-gray-600 mb-3">
                L∆∞u tr·ª±c ti·∫øp v√†o file JSON tr√™n m√°y t√≠nh c·ªßa b·∫°n
              </p>
              
              <div className="space-y-2">
                <button
                  onClick={handleSelectFile}
                  disabled={isLoading}
                  className="w-full py-2 px-4 rounded-lg font-medium text-sm bg-blue-600 text-white hover:bg-blue-700 disabled:bg-gray-300 transition-colors"
                >
                  {isLoading ? '‚è≥ ƒêang ch·ªçn...' : 'üìÇ Ch·ªçn File ƒë·ªÉ L∆∞u'}
                </button>
                
                <button
                  onClick={handleLoadFromFile}
                  disabled={isLoading}
                  className="w-full py-2 px-4 rounded-lg font-medium text-sm bg-green-600 text-white hover:bg-green-700 disabled:bg-gray-300 transition-colors"
                >
                  {isLoading ? '‚è≥ ƒêang t·∫£i...' : 'üì• T·∫£i D·ªØ li·ªáu t·ª´ File'}
                </button>
                
                <button
                  onClick={handleForceSave}
                  disabled={isLoading || !fileStatus?.hasFileHandle}
                  className="w-full py-2 px-4 rounded-lg font-medium text-sm bg-purple-600 text-white hover:bg-purple-700 disabled:bg-gray-300 transition-colors"
                >
                  {isLoading ? '‚è≥ ƒêang l∆∞u...' : 'üíæ L∆∞u Ngay'}
                </button>
              </div>
            </div>
          ) : (
            <div className="border rounded-lg p-4 bg-yellow-50">
              <h4 className="font-semibold mb-2">‚ö†Ô∏è Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£</h4>
              <p className="text-sm text-gray-600 mb-3">
                Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ File System Access API. S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p t·∫£i xu·ªëng/t·∫£i l√™n thay th·∫ø.
              </p>
            </div>
          )}

          {/* Fallback Download/Upload Section */}
          <div className="border rounded-lg p-4">
            <h4 className="font-semibold mb-2">üíæ Xu·∫•t/Nh·∫≠p Th·ªß c√¥ng</h4>
            <p className="text-sm text-gray-600 mb-3">
              T·∫£i xu·ªëng ho·∫∑c t·∫£i l√™n file JSON th·ªß c√¥ng
            </p>
            
            <div className="space-y-2">
              <button
                onClick={handleDownload}
                disabled={isLoading}
                className="w-full py-2 px-4 rounded-lg font-medium text-sm bg-blue-600 text-white hover:bg-blue-700 disabled:bg-gray-300 transition-colors"
              >
                üì• T·∫£i xu·ªëng JSON
              </button>
              
              <div className="relative">
                <input
                  type="file"
                  accept=".json"
                  onChange={handleFileUpload}
                  disabled={isLoading}
                  className="w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-medium file:bg-green-50 file:text-green-700 hover:file:bg-green-100 file:cursor-pointer disabled:file:bg-gray-100 disabled:file:text-gray-400"
                />
              </div>
            </div>
          </div>

          {/* Auto-save Info */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
            <h4 className="font-semibold text-sm text-blue-800 mb-1">üîÑ T·ª± ƒë·ªông l∆∞u</h4>
            <p className="text-xs text-blue-700">
              D·ªØ li·ªáu ƒë∆∞·ª£c t·ª± ƒë·ªông l∆∞u m·ªói 30 gi√¢y v√† khi ƒë√≥ng trang. 
              LocalStorage lu√¥n ƒë∆∞·ª£c s·ª≠ d·ª•ng l√†m backup.
            </p>
          </div>
        </div>

        <div className="flex space-x-3 mt-6">
          <button
            onClick={onClose}
            className="flex-1 py-2 px-4 rounded-lg font-medium text-sm bg-gray-200 text-gray-700 hover:bg-gray-300 transition-colors"
          >
            ƒê√≥ng
          </button>
        </div>
      </div>
    </div>
  );
};